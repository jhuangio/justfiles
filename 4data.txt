bills
...

journal
...
2017
...
. 02/21/17 - first day @ cardinals
. 06/30/17 - last day @ cardinals
. 07/24/17 - first day @ bankers

js
...
4 - behaviors
. intro
. global variables
. strict mode 
. read only properties
. deleting properties
. duplicates
. octals and hexidecimals, oh my
. with
. what is this anyway
. this is new objects 
. summary
5 - async patterns
. intro
. callbacks
. promises 
. es6 and babel
. async - await
. summary
6 - production code 
. intro 
. npm settings 
. environmental variables
. cross platform concerns
. simplify your world

linkedin
...
"Performing HTTP requests (AJAX) Requests throught a Restful JSON API."
"Elasticsearch" - no sql document based db

links
...
Material Design Home Page 
https://material.angular.io/

Material Design Icon Page
https://materialdesignicons.com/

Angular 4 Material Tutorial >>>
https://www.youtube.com/watch?v=UnKsoCeTdEI

jshint >>>
jshint.com

learn javascript deeper >>>
https://medium.freecodecamp.com/what-to-learn-in-2017-if-youre-a-frontend-developer-b6cfef46effd

functional javascript ebook >>>
https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch1.html

beginning javascript >>>
ftp://91.193.236.10/pub/docs/linux-support/programming/JavaScript/[Wiley.%20Wrox]%20-%20Beginning%20JavaScript,%204th%20ed.%20-%20[Wilton,%20McPeak].pdf

blink electric skateboards >>>
https://www.actonglobal.com/product/blink-qu4tro/

visual studio teams >>>
app.vssps.visualstudio.com 
https://cardinalsolutions.visualstudio.com

angular material and cli >>>
http://candordeveloper.com/2017/04/25/how-to-create-dynamic-menu-and-page-title-with-angular-material-and-cli/

angular2 cli >>>
https://dustinewers.com/angular-cli-with-net-core/

.net core from scratch >>>
https://jonhilton.net/2016/10/06/adding-web-api-to-your-net-core-application/

barbara oakley: "learning how to learn" >>>
https://www.youtube.com/watch?v=vd2dtkMINIw

>>> you don't know js - kyle simpson
>>> https://github.com/specter01wj/Book-you_dont_know_js

notes
... 

Expandacraft Gulfport
https://www.youtube.com/watch?v=c0LMBrXAVJE
5102 Gulfport Blvd S. Gulfport, FL 33707

HoverboardX KooWheel Electric Skateboard

06.02.17 - node server
...
const http = require('http');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-type', 'text/plain');
    res.end('Hello World!');
});

server.listen(port, hostname, () => {
    console.log('Server started on port '+port);
});

06.02.17 - github notes
...
01. push changes
03. commit changes
04. sync

06.02.17 - setup node dev http server
...
01. install node
02. create project folder
03. cmd prompt run "npm init" to install node_modules folders/files
04. cd to your project folder for example c:\catjia\bebe
05. run "node c:\catjia\node_modules\http-server\bin\http-server

test to see if x exists >>>
. if(typeof x !== 'undefined'){
    console.log('Exist');
} else {
    console.log('Not Exisit');
}

strict mode >>>
instert at top of code >>>
'use strict';

iife >>>
immediately invoked function expression >>>

format numbers to 2 decimal points >>>
document.write(parseFloat(jia(48,793)).toFixed(2));

use \ backslash to escape a character >>>
in front of what you want escaped for example >>>
'Peter O\'Toole'

naming convention - the Hungarian notation >>>
beginning of name is a 3 letter code for data type for example >>>
intJia

convert string to number >>>
var x = "0";
var y = parseInt(x) + 2; (answer is 2)

how to declare a new array >>>
var myArray = new Array();

what is SCOPE , it is the extent of a variable's availability >>>

error handling >>>
try ... catch statement

joining arrays >>>
the concat() method

modern web developer >>>
Javascript - typescript, es2017, coffeescript, jsx/tsx
libraries / frameworks - RxJS, jQuery, Handlebars, Angular, React
Architecture - MVC, Redux, Flux
Module Loading System / Package Managers - System.js, AMD, JSPM, Bower
Build Pipelines - Webpack, Babel, Traceur, Minifiers, Grunt/Gulp
CSS - LESS SASS

melissa swymer - (813) 944-8315

tools of titans
tim ferris

axis of awesome 4 or 5 chords play almost every pop song

stickk dotcom

perfection is achieved not when there's nothing more to add but when there's nothing more to take away

the 9 habits to stop now - the not to do list
1. do not answer phone calls from unknown phone numbers
2. do not email first thing in the morning or last thing at night
email can wait until after you complete one important thing first
3. do not agree to meetings or calls with no clear agenda or endtime
no meeting or calls should last more than 30 mins
4. don't check email constantly check @ set times twice per day
5. 
6. do not overcommunicate with low profit high maintenance customers
7. 
8. do not carry a digital leash 24 x 7 - sat leave phone at home
9. 

focus on top goals of the day instead of
manufactured emergencies
defining the few things that can change your business and life
think harder not work harder

crack hit aha moment

kato stoic

pluralsight courses
...

VR
...
. Creating VR Experiences with JavaScript by Alex Mackey

ASP.NET
...
01. ASP.NET Core: The MVC Request Life Cycle by Alex Wolf
02. ASP.NET Core wiht the New MSBuild Based Tooling by Wes Higbee

typescript
...
. Getting Started with typescript by Brice Wilson (3h8m)
. Using Visual Studio Code for ASP.NET Core Projects by Shawn Wildermuth (2h26min)
. typescript fundamentals by dan wahlin and john papa (4h25m)
. a practical start with typescript by roland guijt (1h39m)

angular 2
...
. angular 2: getting started by deborah kurata (5h26m)
. angular 2 fundamentals by jim cooper and joe eames (9h59m)

RxJS
...
. getting started with reactive programming using rxjs by scott allen (1h52m)

sharepoint
...
. sharepoint framework - getting started by sahil malik (2h16m)

REST API
...

. javascript objects and prototypes by jim cooper (48min)


>>>
xsl: for sharepoint
>>>

<!--
This section is the set up and can be used at the top of any external XSLT stylesheet file
-->
<xsl:stylesheet
xmlns:x="http://www.w3.org/2001/XMLSchema"
xmlns:d="http://schemas.microsoft.com/sharepoint/dsp"
version="1.0"
exclude-result-prefixes="xsl msxsl ddwrt"
xmlns:ddwrt="http://schemas.microsoft.com/WebParts/v2/DataView/runtime"
xmlns:asp="http://schemas.microsoft.com/ASPNET/20"
xmlns:__designer="http://schemas.microsoft.com/WebParts/v2/DataView/designer"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:msxsl="urn:schemas-microsoft-com:xslt"
xmlns:SharePoint="Microsoft.SharePoint.WebControls"
xmlns:ddwrt2="urn:frontpage:internal">
<xsl:output method="html" indent="no"/>
<!--
End of Set Up
-->
<!--
The initial template which in this case is matching everything with "/"
It then creates a variable called Rows - this is accessed as $Rows
A standard HTML table and header row with the names of our columns is next followed by a loop through each row of the list and calls our second template dvt1-rowview to display the contents
-->
<xsl:template match="/" xmlns:x="http://www.w3.org/2001/XMLSchema">
<xsl:variable name="Rows" select="/dsQueryResponse/Rows/Row" />
<table cellpadding="10" width="331">
<tr>
<td align="center">
<a href="https://cardinalsolutions.sharepoint.com/sites/dev-jhuang/Lists/XMLCal/calendar.aspx" style="text-decoration:none;"><b><font color="#000000">EVENTS CALENDAR</font></b></a>
</td>
</tr>

<xsl:choose>
<xsl:when test="$Rows">
<xsl:for-each select="$Rows">
<xsl:call-template name="dvt_1.rowview" />
</xsl:for-each>
</xsl:when>
<xsl:otherwise>
<tr>
<td bgcolor="#000000" align="center">
<font color="#ffffff"><b>There are no events scheduled this week.</b></font>
</td>
</tr>
</xsl:otherwise>
</xsl:choose>

</table>
</xsl:template>
<!--
End of first template
-->
<!--
Standard HTML rows and cells contain the contents of our list row
xsl:value-of command is used to display our columns
Columns are accessed as @InternalColumnName
-->
<xsl:template name="dvt_1.rowview">
<xsl:variable name="dept" select="@department"/>
<tr>
<td>
<xsl:attribute name="bgcolor">
<xsl:choose>
<xsl:when test="$dept ='Communications'">
#EFCA08
</xsl:when>
<xsl:when test="$dept ='Human Resources'">
#AAA1C8
</xsl:when>
<xsl:when test="$dept ='Away Game'">
#D1D5DE
</xsl:when>
<xsl:when test="$dept ='Client Services'">
#449DD1
</xsl:when>
<xsl:when test="$dept ='Community Relations'">
#575761
</xsl:when>
<xsl:when test="$dept ='Corporate Office'">
#78C0E0
</xsl:when>
<xsl:when test="$dept ='Corporate Partnerships'">
#D56062
</xsl:when>
<xsl:when test="$dept ='Innovation'">
#648381
</xsl:when>
<xsl:when test="$dept ='Marketing'">
#8ACB88
</xsl:when>
<xsl:when test="$dept ='Philanthropy'">
#B7B6C2
</xsl:when>
<xsl:when test="$dept ='Premium'">
#FFC4D1
</xsl:when>
<xsl:when test="$dept ='Ticket Sales'">
#967AA1
</xsl:when>
<xsl:when test="$dept ='Arena Ops General'">
#F49F0A
</xsl:when>
<xsl:when test="$dept ='Arena Ops Home Game'">
#ffffff
</xsl:when>

<xsl:otherwise>
#ffffff
</xsl:otherwise>
</xsl:choose>
</xsl:attribute>
<a href="javascript:NewItem2(event,'https://cardinalsolutions.sharepoint.com/sites/dev-jhuang/Lists/XMLCal/DispForm.aspx?ID={@ID}');" style="text-decoration:none;">

<font size="1">
<xsl:attribute name="color">
<xsl:choose>
<xsl:when test="$dept ='Arena Ops Home Game'">
#000000
</xsl:when>
<xsl:otherwise>
#ffffff
</xsl:otherwise>
</xsl:choose>
</xsl:attribute>

<b>
<xsl:value-of select="@department"/>:&#160;<xsl:value-of select="@Title"/><br/>
<xsl:value-of select="@calcWebDay" />&#160;<xsl:value-of select="@calcWebD2" /></b></font></a></td>

</tr>

</xsl:template>
</xsl:stylesheet>

07.24.17
angular
...

const appRoutes: Routes = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'hero/:id',      component: HeroDetailComponent },
  {
    path: 'heroes',
    component: HeroListComponent,
    data: { title: 'Heroes List' }
  },
  { path: '',
    redirectTo: '/heroes',
    pathMatch: 'full'
  },
  { path: '**', component: PageNotFoundComponent }
];

Elasticsearch
. no sql document based database
. blog storage engine
. log analytics tools
. document / index / shard / nodes / cluster
. www.elasticsearch.org
. Marvel plugin
. . Sense - nice query dashboard
. schemas (mappings)

(POST) http://localhost:9200/my_blog

{
    "mappings": {
        "post": {
            "properties": {
                "user_id": {
                    "type": "integer"
                },
                "post_text": {
                    "type": "string"
                },
                "post_date": {
                    "type": "date"
                }
            }
        }
    }
}

p s 
...
getting started with elasticsearch for .net developers

atlassian - jira
confulence


git notes
...
git add .
git commit -m 'add changes'
git push origin master

user story notes
...
. sortable
. small
. valuable
. estimatable
. independent
. testable
. template
... As a <user type>, I want to <function> so that <benefit>.
... As a <persona>, I want to <do something> so that I can <realize a reward>.

PERSONAS
...
SUPER ADMIN
PARTNER ADMIN OR SUB ADMIN
MOMENT GIVER
MOMENT RECEIVER

sql
...
. microsoft sql server management studio

.net
...
. the CLR manages your app common language runtime
. namespace
. c:\windows\microsoft.net\framework\v4.0.30319\csc - visual c# complier
. ctor (tab/tab) Constructor shortcut

js
..
. constructor funcions should be named with Initial caps
. strict mode es5

angular 4
...
. ng build --prod --aot=false
. index.html
. favicon
. polyfills 1
. main 2
. styles 3 
. vendor 4
. inline 5

oop
...
. three pillars
.. 1 encapsulation (primary)
.. 2 inheritance
.. 3 polymorphism
. inheritance
. polymorphism
. abstract classes
. interfaces
. common interfaces

books
...
. the elements of style - william strunk
. high performance javascript
. javascript patterns

SRP - Single responsibility principles
...
. a computer programming principle that states that every module or class should have a responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.

angular style guide
...
. limiting files to 400 lines of code
. make code more reusable, easier to read and less mistake prone

www
...
. https://developer.mozilla.org/en-US/docs/JavaScript
. http://jsforcats.com/

p s
...
(001) - c# fundamentals with visual studio 2015 by scott allen - 5h21m (07.27.17) 3.10 computation
002 - building a js dev environment by cory house - 5h19m
003 - basics of programming with js by kyle simpson - 2h40m
004 - front-end web dev quick start with html5, css, and js - by shawn wildermuth - 3h4m
005 - advanced js by kyle simpson - 6h55m
006 - practical design patterns in js by jonathan mills - 3h10m
007 - object-oriented programming in js - es6 by mark zamoyta - 2h27m
008 - quick start to js: vol 1 by susan simkins - 1h43m
009 - js async module definition (amd) explained by kevin Murray - 3h4m
010 - rapid js training by mark zamoyta - 5h43m
011 - js: from fundamentals to functional js - bianca gandolfo - 7h9m
012 - js objects and prototypes - jim cooper - 48min
013 - js best practices - jonatha mills - 2h39m
014 - js from scratch - jesse liberty - 1h52m
015 - js: adv fundaments to jquery & pure dom scripting - justin meyer - 8h59m
016 - js fundamentals - lia mclennan - 2h53m
017 - js fundamentals for es6 - scott allen - 4h51m
018 - quick start to js: vol 2 - susan simkins - 1h53m
019 - choosing a js framework - brian holt - 5h31m
(020) - js: the good parts - douglas crockford - 4h52m (07.27.17)
021 - js for c# developers - shawn widermuth - 2h5
022 - js module fundamentals - brice wilson - 2h16m 
023 - hardcore functional programming in js - brian lonsdorf - 6h3m
024 - quick start to js: vol 3 - susan simkins - 1h24m
025 - modern async js - wes higbee - 6h35m
026 - structuring js code - dan wahlin - 2h10m
027 - testing clientside js - joe eames - 4h50m
028 - js design patterns - aaron powell - 2h2
029 - increase productivity: add a dev console to your app with js - carlos saloio - 2h34
030 - solve math programs with js - terry toy - 3h40
031 - prototype.js fundamentals - geoffrey grosenb - 3h3
032 - hands-on js project: solar calculator - paul cheney 2h6
033 - js.next: es6 - aaron frost - 5h24
034 - intro to js & jquery - karl swedberg - 3h34
035 - sweet.js: get started - aaron powell - 3h22
036 - reasoning about async js - wes higbee - 2h5
037 - front-end first: testing and prototyping js apps - elijah manor - 3h21
038 - large scale js on client and server - shawn wildermuth - 2h49
039 - play by play: html, css, and js with lea verou - 2h15
040 - adv techniques in js and jquery - kevin murray - 3h16m
041 - fixing common js bugs - elijah manor - 3h42
042 - front end web dev: get started - joe eames - 3h47
043 - jquery-free js - elijah manor - 2h26min
044 - modern, modular js with systemjs and jspm - wes higbee - 7h25
045 - building adv js animations with GSAP - todd shelton - 2h38
046 - shifting js into high gear with web workers - mike van sickle - 1h57m
047 - adv typescript - brice wilson - 2h55
048 - html5 fundamentals - craig shoemaker - 3h47
049 - creating vr experiences with js - alex mackey - 1h38m
050 - rapid es6 training - mark zamoyta - 4h16
051 - typescript fundamentals - dan wahlin - 4h25m
052 - asp.net ajax javascript and jquery - fritz onion - 2h22
053 - fundamentals of functional programming in js - nate taylor - 1h26
054 - become a full-stack .net developer - mosh hamedani - 5h34
055 - jquery fundamentals - dan wahlin - 5h18
056 - learn to program part 1: getting started - scott allen - 3h12
057 - getting started with typescript - brice wilson - 3h8m
058 - creating a responsive and flexible slideshow in javascript - alfredo lopez - 2h37
059 - fundamentals of building office add-ins with office js api - john brown - 2h36
060 - hands-on javascript project: json - paul cheney - 1h25
061 - building windows 8 apps with js and html - craig shoemaker 429
062 - extending bootstrap with css, js, and jquery - paul sheriff - 3h19
063 - angular cli - john pappa - 2h26min
064 - building web apps with open-source software on windows - jesse liberty - 2h30
065 - building stronger front-end practices - christina truong - 2h2
066 - jquery forms and bootstrap3 - mark zamoyta - 3h34
067 - jquery adv topics - joe eames - 3h3
068 - become a full-stack .net dev - architecture and testing - mosh hamedani - 3h59
069 - visual studio code - john papa - 4h11
070 - jquery animation - mark zamoyta - 3h41
071 - jquery template fundamentals - matt milner - 1h1
072 - getting started with progressive web apps - bill stavoulakis - 2h12
073 - jquery ui - scott allen - 1h54
074 - typescript in-depth - brice wilson - 4h40
075 - jquery tips and tricks - dan wahlin - 4h25m
076 - building scalable apis with graphql - samer buna - 2h10m
077 - jquery in depth - karl swedberg - 3h35
078 - getting started with es2017/es8 - roland gujit - 1h10
079 - jquery plugins & jquery ui - scott gonzalez - 3h26
080 - useful jquery plugins - robert boedighei - 3h16m
081 - fixing common jquery bugs - elijah manor - 2h27m
082 - asp.net core fundamentals - scott allen -5h57
083 - practical guide to vanilla web components - leon revill - 2h10m
084 - bootstrap 3 - shawn wildermuth - 3h50
085 - webpack fundamentals - joe eames - 2h23
086 - building app with asp.net mvc 4 - scott allen - 7h23
087 - intro to bootstrap - scott allen - 2h39m
088 - angular material fundamentals - ajden towfeek - 2h45
089 - asp.net mvc 5 fundamentals - scott allen - 6h14
090 - creating web apis what developers will lovew - kirsten hunter - 2h10m
091 - the journey from mvc to angular - paul sheriff - 2h26min
092 - html5 web component fundamentals - cory house - 5h18
093 - enhancing web uis with parallax scrolling - anthony harris - 1h1
094 - building bus components using angular - paul sheriff - 3h10m
095 - defeating cross-site scripting with content security policy - christian wenz - 2h10m
096 - practical html 5 - gill cleeren - 4
097 - C# fundamentals with C# 5.0 - scott allen - 6
098 - leveraging fluid-width principles for responsive design in jquery - saif ebrahim - 2
099 - amazing things you can do with a web browser - dan appleman - 1
100 - learn basic html 5 and css3 by building your first web page - mario duilio marcari - 2
101 - tactics and tools for troubleshooting front-end web dev - shelley benhoff - 1
102 - the geolocation api: using maps and location in your web pages - elizabeth robson - 1
103 - intro to web dev - nina zakharenko - 10
104 - creating a chrome extension - john sonmez - 2
105 - date and time fundamentals - matt johnson - 6
106 - angular: getting started - deborah kurata - 5
107 - angular fundamentals - joe eames - 9
108 - angular: first look - john papa - 4
109 - angular fundamentals - joe eames - 6
110 - play by play: angular 2 / rxjs / http and restful svc with john papas - dan wahlin - 1
111 - play by play: angular 2 quick start with john papa and ward bell - 2
112 - play by play: angular with typescript with john papa - 2
113 - building a responsive spa framework angular - mark zamoyta - 5
114 - code with us: angular quick start - john papa - 3
115 - angular forms - mark zamoyta - 2
116 - angular routing - deborah kurata - 4
117 - the journey from mvc to angular - 2
118 - angular material fundamentals - ajden towfeek - 2
119 - angular cli - john papa - 2
120 - angular reactive forms - deborah kurata - 3
(121) - angular 2 end-to-end - reggie dawson - 2 (07.28.17)
122 - integrating angular with node.js restful svc - dan wahlin - 4
123 - play by play: angular testing with john papa and ward bell - 1
(124) - adv angular workflows - johnathan mills - 1 (07.28.17)
125 - working with angular animations - gary simon - 1
126 - styling angular app - brian treese - 1
127 - add angular to mvc apps - paul sheriff - 2
128 - building bus components using angular - paul sheriff - 3
129 - become a full-stack .net dev - mosh hamedani - 5
130 - become a full-stack net dev - adv topics - mosh hamedani - 4
131 - asp.net core fundamentals - scott allen - 5
132 - building your first asp.net core web app - gill cleeren - 4
133 - builidng your first api with asp.net core - kevin dockx - 4
134 - building a restful api with asp.net core - kevin dockx - 8
135 - implementing and securing an api with asp.net core - shawn wildermuth - 6
136 - getting started with .net core for windows dev - wes higbee - 3
137 - asp.net core: the mvc request life cycle - alex wolf - 3
138 - asp.net mvc adv topics - scott allen - 5
139 - become a full-stack .net developer - architecture and testing - mos hamedani - 3
140 - using asp.net core to build single-page app - ajden towfeek - 1
141 - asp.net mvc fundamentals - scott allen - 4
142 - using visual studio code for asp.net core projects - shawn wildermuth - 2
143 - understanding asp.net core (update) - roland guijt - 2
144 - asp.net core with the new msbuild based tooling - wes higbee - 4
145 - building apps with asp.net mvc 4 - scott allen - 7
146 - understanding asp.net core security - goland guijt - 3
147 - migrating legacy http modules to asp.net core - chad mccallum - 2
148 - implementing an api in asp.net web api - shawn wildermuth - 6
149 - asp.net 5: first look - scott allen - 2
150 - c# fundamentals with visual studio 2015 - scott allen - 5
151 - implementing custom middleware components in asp.net core - galvin lanata - 1
152 - asp.net ajax js and jquery - fritz onion - 2
153 - 10 ways to build web services in .net - chad mccallum - 6
154 - building cross-platform apps with .net core - wes higbee - 7
(155) - asp.net mvc fundamentals - scott allen - 4 (07.28.17) 
156 - asp.net mvc adv topics - scott allen - 5
157 - docker for web dev - dan wahlin - 5
158 - play by play: docker for web dev with john papa - 1
159 - getting started with docker - nigel poulton - 2
160 - docker deep dive - getting started with docker on win - wes higbee - 5
161 - docker and containers: the big picture - nigel poulton - 1
162 - intro to docker on win with visual studio 2017 - marcel de vries - 4
163 - getting started with docker datacenter - elton stoneman - 1
164 - managing docker images - david clinton - 1
(165) - deploying .net app with octopus deploy - kenneth truyers - 1 (07.28.17)
166 - play by play: modernizing your deployment strategy with octopus - damian brady - 1
(167) - advanced techniques in js and jquery - kevin murray - 3 - (7/31/17)
(168) - basics of programming with js - kyle simpson - 2 - (7/31/17)
(169) - advanced js - kyle simpson - 6 - (7/31/17)
(170) - intro to sql - john flanders - 3 (8/1/17)
(171) - play by play: angular testing with john papa and ward bell - 1 (8/4/17) [1,2]
(172) - visual studio code - john papa - 4 (8/4/17) [1,2,3,4,5,6,7,8,9]
(173) - intro to node.js - paul o'fallon - 2 [1,2,3,4,5,6,7]
(174) - advanced node.js - samer buna - 3 [1,2,3,4,5,6,7,8,9,10]
(175) - rapid es6 training - mark zamoyta - 4 [1,2,3,4,5,6,7,8,9]
(176) - hardcore functional programming in js - brian lonsdorf - 6 (8/9/17) [1,2,3]
(177) - adv typescript - brice wilson - 2 (8/9/17) [1,2.1,3]
(178) - typescript in-depth - 4 (8/9/17) [1,2,3,4,5,6,7,8,9,10,11]
(179) - a pratical start with typescript - roland guijt - 1 (8/9/17) [1,2]
(180) - add angular to mvc apps - paul sheriff - 2 (8/10/17) [1,2,3,4,5,6,7,8]
(181) - angular fundamentals - jim cooper and joe eames - 9 (8/11/17) [1,2,3.9,4,5,6,7,8,9,10,11,12,13,14,15,16,17]
(182) - typescript in-depth - brice wilson - 4 - (8/14/17) [1,2,3,4,5.3,6,7,8,9,10,11]

docker
...

elasticsearch
...

octopus
...
. 

.net
...
. entity framework - data oriented apps
. code first ddd domain driven design - creating classes first rather than db first. code first api will create db on the fly based on your classes and config.
. mvc model view controller

http-server
...
. run http-server
. http://127.0.0.1:8080/jia.html

node.js
...
. created 2009
. server side js
. 3 parts = libuv + v8 + custom js c++

clarity
...

es6 - ecmascript 2015
...

js
...
. var newJia = oldJia.replace('jia', 'cat');
. currying or partial app is one of the functional techniques

launch.json
...
{
    // Use IntelliSense to learn about possible Node.js debug attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
         {
            "name": "Launch Chrome against localhost, with sourcemaps",
            "type": "chrome",
            "request": "launch",
            "url": "http://localhost:4200/#/login/7777777",
            "sourceMaps": true,
            "trace": true,
           /*"diagnosticLogging": true,*/
            "webRoot": "${workspaceRoot}/src",
            "useDataDir": "${workspaceRoot}/.vscode/chrome",
            "sourceMapPathOverrides": {
              "webpack:///C:*": "c:/*"
          }
        },
        {
            "name": "Attach to Chrome, with sourcemaps",
            "type": "chrome",
            "request": "attach",
            "port": 9222,
            "sourceMaps": true,
            /*"diagnosticLogging": true,*/
            "webRoot": "${workspaceRoot}",
            "url": "http://localhost:4200/*",
            "sourceMapPathOverrides": {
                "webpack:///*": "/*"
            }
        },
        {
            "name": "Debug Test",
            "type": "chrome",
            "request": "launch",
            "url": "http://localhost:9876",
            "sourceMaps": true,
           /*"diagnosticLogging": true,*/
            "webRoot": "${workspaceRoot}",
            "sourceMapPathOverrides": {
              "webpack:///C:/HOMEOWNERS/homeownersclient/*": "${workspaceRoot}/*"
          }
        }        
    ]
}

typescript
...
. based on ECMAScript 2015
. designed by anders hejlsberg the designer of c# - 10/2012
. classes
  . fields- any var declared in a class
  . constructors
  . functions or methods
. numbers - property
  . MAX_VALUE
  . MIN_VALUE
  . NaN 
  . NEGATIVE_INFINITY
  . POSITIVE_INFINITY
  . prototype
  . constructor
. numbers - methods
  . toExponential()
  . toFixed()
  . toLocaleString()
  . toPrecision()
  . toString()
  . valueOf()
. string - property
  . constructor
  . length
  . prototype
. string - methods
  . charAt()
  . charCodeAt()
  . concat()
  . indexOf()
  . lastIndexOf()
  . localCompare()
  . match()
  . replace()
  . search()
  . slice()
  . split()
  . substr()
  . substring()
  . toLcaleLowerCase()
  . toLocaleUpperCase()
  . toLowerCase()
  . toString()
  . toUpperCase()
  . valueOf()
. array - methods
  . concat()
  . every()
  . filter()
  . forEach()
  . indexOf()
  . join()
  . lastIndexOf()
  . map()
  . pop() - remove last element from array and returns that element
  . push() - adds one more element to the end of the array and returns the length of the array
  . reduce()
  . reduceRight()
  . reverse()
  . shift() - remove 1st element and return element
  . slice() 
  . some()
  . sort()
  . splice()
  . toString()
  . unshift()

. prototype - the prototype property allows you to add properties and methods to an object
. Enums
. tuples - let myTuple: [number,string] = [25, 'truck'];
. functions - building blocks of readable, maintainable, and reusable code
  . lambda - fat arrow function
    1. parameters
    2. fat arrow notation => aka goes to operators
    3. statements - functions instruction set
    . var foo = (x:number)=>10+x
  . defining a function what and how task to be done
  . calling a function - executing function
  . returning functions - return values
  . parameterized function - pass values
  . anonymous function
    . var msg = function() {
      return "hello";
    . }
    . console.log(msg())
. loops
  . break - break out of loops
  . continue
  . definite loop - for loop
  . indefinite loop 
    . do...while
    . while loop
. types
  . boolean
  . number
  . string
  . array
  . Enum - friendly names to finite set of numeric values
  . any - string, number, or object
  . void - function does not return a value
. let and const - scope inside block not function (var hoisted to top of function) name only allowed once in each code block
. operators
  . arithmetic
  . logical
  . relational 
  . bitwise
  . assignment
  . ternary/conditional - test ? expr1 : expr2
  . string
  . decision
    . if statement
    . if..else statement
    . else... if and nested if statements
    . switch statement
  . type
    . typeof
    . instanceof
. SCOPE
  . global scope
  . class scope (fields) 
  . local scope - inside methods, loops, etc.
. type assertion - changing a var from one type to another
. superset of js
. strong typing fewer bugs
. compiles to js
. cross platform
. open sourceMapPathOverrides
. tsc -v (check for version)
. variable declaration in tsc
  . var id: type = value;
  . var id: type; (value=undefined)
  . var id = value; (type=any)
  . var id; (type=any,value=undefined)
. var names
  . alpha and numeric (cannot start with number)
  . no special char or spaces (except _ and $)
. user-defined types
  . enumerations (enums)
  . classes
  . interfaces
  . arrays
  . tuple
. null and undefined
  . undefined - var has no value or object assitned to it
  . null - var set to object with value undefined
. keywords
  . break
  . as
  . any
  . switch
  . case
  . if
  . throw
  . else
  . var
  . number
  . string
  . get
  . module
  . type
  . instanceof
  . typeof
  . public
  . private
  . enum
  . export
  . finally
  . for
  . while
  . void
  . null
  . super
  . this
  . new
  . in
  . return
  . true
  . false
  . any
  . extends
  . static
  . letter
  . package
  . implements
  . interfaces
  . function
  . new
  . try
  . yield
  . const
  . continue
  . do
  . catch
  . name? new?
. template strings
  . surrounded by backticks ` and embedded expressions ${ name }`
. array
  . let list: number[] = [1,2,3];
  . let list: Array<number> = [1,2,3];
. tuple - array with mixed type for examle string and number
  . let x: [string, number];
  . x = ["hello", 10];
. enum - a way of giving more friendly names to set of numeric values
. any - let notSure: any = 4;
. void - function that does not return a value
  . function warnUrser(): void {
    alert('test');
  }


books
...
. design patterns: elements of reusable object-oriented software by erich gamma, richard helm, ralph johnson and john vlissides "gang of four"

all about fat arrow functions
...
. you don't need to keep typing function
. it lexically captures the meaning of this
. it lexically captures the meaning of arguments
. sample - var inc = (x)=>x+1;

ng4 notes
...
. component classes manage html templates
. app logic in services
. organizing components and services in modules
. bootstrapping the root module
. decorators - functions that modify js classes - angular uses decorators to attach metadata to classes so that it knows what those classes mean and how they should work
. declarations - view classes that belongs to this module
  1. components
  2. directives
  3. pipes
. exports
. imports 
. providers - services
. bootstrap - link to root component
. components
  . controls a patch of screen called a view
  . define app logic (what it does to support the view) inside a class
  . the class interacts with the view through an API of properties and methods
. lifecycle hooks - creates, updates, destroys - ngOnInit()
. templates - html
. metadata - tells angular how to process a class
. @Component decorators
  1. selector - CSS selector that tells angular to create and insert an instance of this component where it finds a <component-name> tag in parent html
  2. templateUrl - relative address to html template
  3. providers - array of dependency injection providers for services that the component requires
. other decorators
  1. @Injectable
  2. @Input
  3. @output
. data binding - bind component data to html template single or both directions
. interpolation {{name}}
. property binding [hero] pass selectedHero from parent to child
. event binding (click) calls component methods from browser events like button clicks for example
. 2 way data binding with <input [(ngModel)]="hero.name">
. structural directives
  1. <li *ngFor="let hero of heroes"></li>
  2. <hero-detail *ngIf="selectedHero"></hero-detail>
. attribute directive - ngModel - <input [(ngModel)]="hero.name">
  . ngSwitch
  . ngStyle
  . ngClass
. service - value, function or feature taht your app needs - shared service
  . a class with a narrow well-defined purpose it should do something specific and do it well
  . logging svc
  . data svc
  . message bus
  . tax calculator
  . app config
. dependenc injection - provide new components with services they need
. animations
. change detection
. events
. forms
. http
. lifecycle hooks
. pipes
. router
. testing
. lifecycle hooks
  . ngOnChanges - called before ngOnInit()
  . ngOnInit
  . ngDoCheck
    . ngAFterContentInit
    . ngAfterContentChecked
    . ngAfterViewInit
    . ngAfterViewChecked
  . ngOnDestroy - cleanup just before angular destroys the directive/component
. safe namespace css

functional js
..
. eloquent js - http://eloquentjavascript.net/1st_edition/chapter6.html
. mostly adequate guide to fp - https://github.com/MostlyAdequate/mostly-adequate-guide
. fun fun functions video series - https://www.youtube.com/watch?v=BMUiFMZr7vk
. a nettut's paid video course on fp - http://code.tutsplus.com/courses/functional-programming-in-javascript
. js allonge - https://leanpub.com/javascriptallongesix/read
. dry - don't repeat yourself
. yagni - ya ain't gonna need it
. loose coupling high cohesion
. principle of least surprise
. single responsibility
. pure function - given same input will always return same output does not have any observable side effect
. currying - you can call a functon with fewer arguments than it expects. it returns a function that takes the remaining arguments
. hindley-milner type signatures


angular
...
. @Input() - pass from parent to child put on child component file
  . <event-thumbnail [event]="event1"></event-thumbnail>
. date
  . today: number = Date.now();
  . {{ today | date: 'yyyy' }}

smacss.com
...

interfaces 
...
. are the way to type anything more complicated than our basic types, including function and classes\
  interface IMyInterface {
    value: string;
    method(): number;
    (): boolean;
  }
. contracts that define types
. defines how a type can and cannot be used
. defines shape of an object
. interface is a contract without the implementation details

  arrow functions
  ...
  . concise syntax for anonymous functions - with fat arrow, you don't have to write the "function" keyword or "return" keyword - much more concise - aka Lamda  functions
  . js 
    let arr allBooks.filter(function(book) {
      return book.author === 'Herman Melville';
    });
  . tsc
    let arr = allBooks.filter(book => book.author === 'Herman Melville');

classes
. template for creating objects
. provides state storage and behaviors
. encapsulates resuable functionality

constructors
...
. constructors are functions that perform initialization for new instances of a class
. in ts only one constructor per class
. constructor(title: string, publisher?: string) {} "?" makes it optional

properties and methods
...
. classes provide the actual implementation details

generics
...
. bits of code designed to work with multiple types

array
...
. let poetryBooks: Book[];
. let poetryBooks: Array<Book>;

destructuring arrays
...
. let medals: string[] = ['gold', 'silver', 'bronze'];
. let [first, second, third] = medals;

destructuring objects
...
. let person = {
    name: 'jia',
    addres: '304 fern rd',
    phone: '813-415-5571'
  }
. let { name, address, phone } = person;

decorators
...
. proposed feature for future js
. implemented as ts functions

callback functions
...
. higher order functions
. commonly used to process async results
. node accept error and data parameterized 
. interface LibMgrCallback {
    (err: Error, titles: string[]): void;
  }

interface
...
. code contract
. interface IEngine {
    start(
      callback: (
        startStatus: boolean,
        engineType: string) => void): void;
    stop(
      callback: (stopStatus: boolean,
      engineType: string) => void): void;
    )
      )
    )
}

ts - class
...
. class is the blueprint house is the object
. define data in a class with fields
. object of a class is also instance of a class
. fuction in a class is also method of a class

ts - data types
...
. built-in types
  . boolean
  . string
  . number
. custom types
  . enum
  . array
  . interface
  . class

type inference - when you try to assign a string to a number ts will give you an error even if you don't specify the type due to type inference based on the number value assigned to the var

type assertions - assert the data type after first declaring it <any> type
. let fixedString: string = (<number>value).toFixed(4);
. let fixedString: string = (value as number).toFixed(4);

interfaces vs classes
...
. interface
  . define a new type
  . properties (signatures)
  . methods (signatures)
  . cannot be instantiated (contract)
. classes
  . define a new type
  . properties (with inplementation)
  . methods (with implementation)
  . can be instantiated

  creating an interface - interface can extend another interface
  . interface Manager extends Employee {}

  constructor
  . special type of function to create new instances of a class
  . constructor {} { console.log ('test')}

  super();
  . calling super is how you call the parent class's constructor from a child class

  hoisting
  . anytime a var keyword is used inside a function, it is hoisted to the top of the function regardless of where it is in the function

const
...
. block scoped
. const startTime = Date.now();

namespace - ts only concept

naming
...
. pascal casing - InitialCaps
. camel casing - initialLowerCase

js - prototyping
...
. every object is built by a constructor function 
. a constructor makes an object based on it's own prototype
. a constructor makes an object that is "linked to" it's prototype

notes
...
. objects as squares
. functions as circles
. before line 1
  . function named object
  . object named .prototype link from function to object
    . toString
. line 1
  . fuction named "Foo"
  . object named .prototype link from function to object
  . .constructor link from object to function
. line 4
  . add property "identify" to object
. line 8 - create new a1 object
  . create a new object
  . set "this" focus on object
  . add a new property ".me" in object
  . return this give object label "a1"
. line 9 - create a new a2 object
  . create a new object
  . set this focus on object
  . add a new property.me in object
  . return this give object label "a2"
. line 11 - add speak method to object

[[Prototype]] - bracket bracket P

.prototype - dot prototype

__proto__ - dunder proto
. getter function returns internal prototype linkage
. public property
. es6 standard
. IE 11

Object.getPrototypeOf(a1)

shadowing prototype chain

"this" keyword always reference the call site

go up the prototype chain to find constructor

currying in js
...
. is a way to reduce functions of more than one argument to functions of one argument
. partial evaluation

Object.create
. create a new object
. link it
. no return data
. no constructor
. Bar.prototype = Object.create(Foo.prototype);

oop
...
. classes = classification

objects aka
...
. representation
. abstraction
. model
. thing
. entity
. business object
. object

class
. blueprint used to stamp out objects
. class = classification
. object = instances of class
. name class Pascal case for ex "Drone"
. a class is a function
. you use the class function to create a new instance of Drone an object
. let drone = new Drone();
. static properties or class properties you can add properties to the class itself
. method is a function that gets attached to an instance
. when working with an instance of a class, always use the "this" keyword to refer to the object property
. static method only exists on the class not the instance
. when a variable name begins with an underscore, it usuall means it's private for example "_id"
. getters and setter
. each html element can be a class

ocp - the open/closed principle
... 
. the open / closed principle states that software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification

srp - the single responsibility principle
...
. the srp states that every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class

the liskov substitution principle
...
. states that subtypes must be substitutable for their base types

isp - the interface segregation principle
...
. states that clients should not be forced to depend on methods they do not use

dip - the dependency inversion principle
...
. high level modules should not depend on low level modules. both should depend on abstractions
. abstractions should not depend on details.
. details should depend on abstractions

dry - don't repeat yourself
...
. every piece of knowledge must have a single, unambiguous representation in the systemjs
. repetition in logic calls for abstractions.
. repetition in process calls for automation

js - functions
...
. function functionName(parameter){
    }
. functionName(argument);

array
...
. store a list of information
. var friends = [];

objects
...
. host objects
  . document
  . window
  . element
  . event
  . node
  . comment
  . console
. core objects
  . math
  . object
  . string
  . boolean
  . array
  . date
  . number
. custom objects

software eng
...
. discipline applied to 

    sprint 15
    ...
    01. testing effect
    02. eft email notification
    03. eft - endorsements, cancels, other changes
    04. payment screen modification for eft
    05. create hamburger menu to save with options
    06. pos screen mods for pho - discounts /surcharges
    07. modify deductible screen to accomodate three deductibles for pho
    08. modify deductible screen to accommodate three deductibiles for pho
    09. outstanding pho rating
    10. pho edits
    11. quote pdf
    12. ux/ui cleanup
    13. applicant date of birth - tx pho
    14. load testing
    15. ux imporvements and optomization
    16. regression testing sprint 15
    17. bho2172 is triggering as uw and it should not
    18. sprint 15 production support 8/2 - 8/15
    19. fl ho - dummy policy number for m p d 
    20. eft payment option not displaying on the application

    backlog
    ...
    01. spike: ca/uat environment
    02. state validation for pos 
    03. pho tx - distance to water and coast
    04. 5) coverage edits (2)
    05. pho - make credit mandatory
    06. pos mod for pho - run credit via lexis nexis (3)
    07. test rating
    08. application (research, validate, program and test)
    09. check writer
    10. push front end data to backend
    11. transaction testing (froom front-end nb policy)
    12. month end set up
    13. lockbox setup
    14. doc package testing
    15. lender and payemnt screen adjustments
    16. eft - endoresments cancels other changes long term
    17. spring 16 regressing testing 8/16 - 8/29
    18. sprint 16 product support 8/16/-8/29
    19. add property edits (pos and pho)
    20. deploy pos ui and web api to ca environment
    21. rename field on producer screen
    22. pos - cross sell for flood
    23. append quote cover letter to pdf
    24. google analytics: screen progression
    25. screen progression for bi 
    26. pl rater fl - modifyfor pos platform
    27. agent set up
    28. establish fully functional uat /ca environment
    29. run def rater state driven
    30. elastic search for street address in pos
    31. elastic address search
    32. pre-fill for property characteristics in pos 
    33. lexis nexis - no score no hit and zero score
    34. 360 value update xml for exterior pool
    35. production - fix la hail deductible backend edit
    36. display print pre-app
    37. run clue - back end integration 
    38. run clue service call to lexis nexis
    39. private label ui modifications
    40. inspection data irs integration
    41. inpsection data millennium integration
    42. maintenance screens
    43. prior carriers add to 460
    44. credible  year question should not be displayed for address with ppc2 as blank
    45. ivans
    46. ets 82596  increase binding limit for florida ho4
    47. adis warehouse
    48. statement & agreement
    49. adis prefill
    50. spike - technical discussion temp exposure
    51. exposure closing temp
    52. exposure closing perm 
    53. spike - technical discussion instant dec 
    54. spike - upload documents discussion / documentation
    55. run credit long term solution part 2
    56. run credit long term solution part 1
    57.. ux/ui cusotm ui/ 3rd party
    58. upload documents
    60. __________ future release stories above this line
    61. ets 82643 manually entered dist to coast error in rating fl
    62. ets 82620 nb quote purge process
    63. ets 82623 sc h06 only offering base package
    64 fl ho unable to add additional insured in sqa 
    65. ets 82625 homeowners wind mit values back end validation
    66. create edit to send quotes with increased business property to underwriting
    67. modify profit hurdle for def rater
    68. ets 82602 optimize program call to 610 for homeowners agent portal screens
    69. fix policy data mover for ho
    70. pl rater secondary seasonal aop error message not firing 
    71. pho ho4 and ho6 sotry placeholder for possible future release 
    72. add eft functionality to homeowners consumer portal
    73. add eft functionality to legacy homeowners agent portal
    74. spike assess options for enhancing security for pps in immediate and medium terms
    75. unable to print instant dec
    76. date of purchase issue
    77. incorrect wind mit uwr message
    78. nacha file - change to entry hash calculation
    79. eft backend bug - pps error message and subscription id in same field overwriting
    80. eft backend notification if pps is unavailable

    js - prototype object
    ...
    . each 'type' has a prototype object
    . just an object (example can add properties to it)
    . all instances of an 'type" share the members of the prototype

    js notes
    ...
    . first class functions - functions treated like any other variable
    . js is a prototype-based language
    . each object has a prototype object, which acts as a template object that inherits methods and properties from
    . the properties and methods are defined on the prototype property on the object's constructor functions not the object instances themselves
    . prototype chain

pluralsight
...
    (182) - typescript in-depth - brice wilson - 4 - (8/14/17) [1,2,3,4,5,6,7.2,8,9,10,11]
    (183) - adv ts - brice wilson - 2 - (8/14/17) [1,2,3,4,5,6,7]
    (184) - ts fundamentals - dan wahlin - (8/14/17) 4 [1,2,3,4]
    (185) - a practical start with ts - roland guijt - (8/14/17) 1 [1,2,3.3,4,5]
    (186) - getting started with ts - brice wilson - 3 (8/14/17) [1,2,3,4,5,6,7]
    (187) - using es6 with ts - steve ognibene - 2 (8/14/17) [1,2,3,4]
    (188) - basics of pro with js - kyle s - 2 (8/14/17) [1.2]
    (189) - adv js - kyle s - 6 (8/14/17) [1,2,3,4.4,5]
    (190) - oop in js es6 - mark z - 4 (8/15/17)  [1,2,3.10,4,5,6,7]
    (191) - solid principles of oo design - steve s - 4 (8/15/17) [1,2,3,4,5,6,7,8,9]
    (192) - quick start to js vol 3 - susan s - 1 (8/15/17) [1,2]
    (193) - software eng essentials - mohamad h - 4 (8/15/17)[1,2,3,4,5,6,7,8,9]
    (194) - what is programming - simon a - 2 []
    195 - beginning powershell scripting for dev - robert c - 6 []
    (196) - js for c# dev - shawn w - 2 [1,2,3,4]
    (197) - quick start to js vol 2 - susa s -(8/15/17) [1,2]

    fp in js
    ...
    . five functions
      1. map
      2. filter
      3. concatAll
      4. reduce
      5. zip
    . forEach -
        function jia(){
          var names = ["ben", "jia", "matt", "cat", "ann"];
          names.forEach(function(name){
            document.write(name+"<hr>");
          }); 
        };
    . applying a function to a value and creating a new value is called a projection. to project one array into another, we apply a projection function to each item in the array and collect the results in a new array.
    . features of fp
      . purity - expressions with side-effects are nto allowed
      . immutability
      . recursion - the ability for a function to reference itself for the purpose of iteration.
      . purity - 
      . immutability
    
    fp js - map function
    ...
    .   var numbers = [1,3,5,7,9];
        var doubles = numbers.map(function(x){
            return x*2;
        });

    fp js - filter function
    ...
    . var longWords = words.filter(function(word){
          return word.length > 4;
      });

    fp js - concat
    ...
    . var arr1 = [ 'a', 'b', 'c'];
      var arr2 = ['d', 'e', 'f'];
      var arr3 = arr1.concat(arr2);

    fp js - reduce
    ...
    . var total = [0,1,2,3];
      var x = total.reduce(function(sum, value){
          return sum + value;
      }, 0);
      var flattened = [[0,1],[2,3],[4,5]].reduce(function(a,b){
        return a.concat(b);
      },[]);

      fp js - currying
      ...
      . process of taking a function with n arguments and transforming it into n functions that each take a single argument.  it essentially creates a chain of partially applied functions that eventually resolves with a value.
      . first - curry expects a function as its argument

      fp js - apply
      ...
      . method calls a function with a given this value and arguments provided as an arry or an arry like object

fp - theory
...
. fp is based on math

currying
...
. a way of calling a functiionwith less arguments than the function requires
. everytime the function is called it will return a new function expecting one less argument. and when all the arguments are passed, then the original function will be called
. function add(x) {
    return function(y) {
        return x + y;
    }
  }
  const add2 = add(2);
  var z = add2(3);
  document.write(z);

  OWASP [1,2.1,3,4,5,6,7,8,9,10,11]
  ...
  . Open Web Application Security Project
    1. not for profit 
    2. technology agnostic
    3. contributed to selflessly by the security Community
  . each security risk
    1. overview of the risk
    2. understanding the risk
    3. common defenses
    4. risk in the wild 
  . injection (sql)
    . attack vectors - exploitability easy
    . security weakness - prevalence, common - detectability average
    . technical impacts - sourceMapPathOverrides
  . attacker - malicious request - website - modified query - database - query output - data exfiltration
  . defense against injection attecks
    . whitelist - untrusted data
      . what input do we troubleshooting
      . does it adhere to expected patterns
    . parameterize sql statements
      . seperate the query from the input data
      . type cast each parameter
    . fine tune db permissions 
      . segment accounts for admin and public
      . apply of "principle of least priviledge"
  . broken authentication & session management overview
  . understanding hijacking
    . Auth cookie theft
      . exploiting an XSS risk
      . retrieve it from the victim's ppc2
      . sniff it over an insecure connection
    . session id theft
      . copy and paste a URL with it
      . send it via an insecure email
      . retrieve it from a log
    . account management attack
      . brute force the login
      . discover weak credentials
      .  exploit password represet 
    . 3 defences against broken authentication
      1. protect the cookies
         . use the HttpOnly flag
         . make sure they're flagged as "Secure" must use https:// not http://
      2. decrease the window of risk
         . expire sessions quickly
         . re-challenge the user on key abstractions
      3. harden the account management 
         . allow and encourage strong passwords
         . implement login rate limiting and lockouts
  . XSS - cross site scripting
. common defenses against direct references - implement access controls
  . use indirect maps 
    . don't expose internal keys externally
    . map them to temp ones 
  . avoid predictable keys 
. security misconfiguration
  . always harden the install
    . turn off features that aren't needed
    . apply the "principle of least privilege"
  . tune the app security config 
    . ensure it's production ready
    . defaults are often not right 
  . ensure packages are up to date
    . be conscious of 3rd party tool risks
    . have a strategy to monitor and update 
. understanding sensitive data exposure
  . insufficient use of selflessly
    . login not loaded over https
    . cookies not sent securely
    . "mixed mode"
  . bad crypto
    . incorrect password storage
    . weak algorithms chosen
    . poor protection of keys
  . other exposure risks
    . disclosure via url
    . leaked via longWords
    . browser auto complete
. missing function level access control 
  . does the ui show navigation to unauthorized functions?
  . are server side authentication or authorisation checks missing?
  . are server side checks done that solely rely on information provided by the attacker?
  . are system or diagnostic resources accessible without proper authorization?
  . common defenses
    . define a clear autorization  model
      . define centrally and consistently
      . use roles and apply membership
    . check for forced browsing
      . check for default framework resources
      . automated scanners are excellent for this
    . always test unprivileged roles
      . capture and replay privileged requests
      . include POST request and async calls
. CSRF or XSRF - cross site request forgery
  . common defenses
    . employ anti-forgery tokens
      . CSRF is exploited by predictable patterns
      . tokens add reandomness to the request
    . validate the referrer
      . valid requests don't originate externally
      . the referrer is in each request header
    . other defences 
      . native browser defenses
      . fraud detection patterns
. unvalidated redirects and forwards
  . http://vunerablesite.com/redirect/?url=http://attackersite.com/malware.exe 
  . defenses
    . use a url whitelist - what urls are allowed to redirect to?
      . what urls are allowed to be redirected to?
      . abort if the url is not allowed
    . use indirect references 
      . pass an id to the redirect, not a url
      . resolve the url from a reference map
    . check the referrer
      . did the redirect originate from the site?
      . may neeed to whitelist multiple sites
  
js functions
..
. functions are values they can be assigned, copied or declared in any place of the code
. if the function is declared as a seperate statement in the main code flow, that's called a 'function declaration'
. if a function is created as a part of an expression it's called a 'function expression'
. function expressions are created when the execution flow reaches them
. variables
  . let
  . const (constant, can't be changed)
  . var (old style)
    
js - notes
. use strict
  . "use strict";
. 7 types in js
  1. number
  2. string
  3. boolean
  4. null - unknown value
  5. undefined - unassigned values
  6. object
  7. symbol
. ToString - convert to string
. ToNumber
. ToBoolean
. alert
  . alert(message);
. prompt
  . result = prompt(title[, default]);
. backticks
  . let age = prompt('how old are you?', 100);
  . alert (`you are ${age}} years old!`);
 . logical operators
   . or ||
   . and && 
   . not 
     . result = !value;
. arrow functions
  . let sum = (a,b) => a+b;
  . document.write(sum(1,2));
  . no need for "function" and "return"

js style
...

function pow(x, n) {
  let result = 1;

  for (let i = 0; i < n; i++) {
    result *= x;
  }

  return result;
}

let x = prompt("x?", "");
let n = prompt("n?", "");

if(n < 0) {
  alert(`Power ${n} is not supported,
    please enter an integer number, greater than 0`);
} else {
  alert( pow(x, n) );
}

. a space between parameters
  . (x, n)
. no space between the function name and the bracket between the bracket and the parameter
  . pow(x, n)
. figure bracket { on the same line, after a space
  . function pow(x,; n) {

  }
. spaces around operators
  . for (let i = 0; i < n; i++) {

  }
. identation 2 spaces
  . function pow(x, n) {
    let result = 1;
  }
. a space after for/if/while...
  . let result = 1;

    for (let i = 0; i < n; i++) {
      result *= x;
    }

    return result;
. a semicolon ; is mandatory
  . result *= x;
. a space between parameters
  . let x = prompt("x?", "");
  . let n = prompt("n?", "");
. an empty line beetween logical blocks
  . let n = prompt("n?", "");

  . if (n < 0) {

  }
. lines are not very long
  . alert (`Power ${n} is not supported,
      please enter an integer number, greater than 0`);
. spaces around a nested cell
  . alert( pow(x, n) );
. } else { without a line break
  . if (n < 0) {
    alert('test);
  } else {
    alert('next');
  }

js style (cont.)
...
. bracket spacing
  . for really short code, one line is acceptable : like if (cond) return null.
  . but a seperate line for each statement in brackets is usually better
. line length
  . the max line length should be limited
  . no one likes to eye-follow a long horizontal line
  . it's better to split it
  . the max line length is agreed on the team-level
  . it is usually 80 to 120 characteristics
. indents
  . there are 2 types of indents
    1. a horizontal indent 2(4) spaces
       . a horizontal indent is made using either 2 or 4 spaces or the "tab" symbol
       . spaces are more common nowdays instead of tab
       . one advantage of spaces over tabs is that spaces allow more flexible configurations of indents than the 'tab' symbol.
    2. a vertical indent: empty lines for splitting code into logical blocks
       . function pow(x, n) {
           let result = 1;

           for (let i = 0; i < n; i++) {
             result *= x;
           }

           return result;
        }
        . insert an extra newline where it helps to make the code more readable
        . there should nto be more than 9 lines of code without a vertical indentation.
. a semicolon
  . a semicolon should be present after each statement
  . even if it could possibly be skipped
. nesting levels
  . there should not be too many nesting levels
  . sometimes it's a good idea to use the "continue" directive in the loop to evade extra nesting in if(..) { ... }:

  google js style guide
  ...
  . https://google.github.io/styleguide/javascriptguide.xml

  airbnb js style guide
  ...
  . https://github.com/airbnb/javascript

  idomatic.js
  ...
  . https://github.com/rwaldron/idiomatic.js

  standardjs
  ...
  . https://standardjs.com/

js style (cont.)
...
. function doNothing() {}
. array literals make it "block-like"
  const a = [
     0,
     1,
     2
  ];
  someMethod(foo, [
    0, 1, 2,
  ], bar);
. object literals "block-like"
  const a = {
    a: 0,
    b: 1
  };

  someMethod(foo, {
    a: 0, b: 1
  }, bar);

. Camel case: defined

quotes
...
. the hardest thing of all is to find a black cat in a dark room, especially if there is no cat - confucius
. when in the light, can't see anything in the darkness. when in the darkness, can see everything in the light. guan yin zi 
. design is not just what i looks like and feels like.  design is how it works. steve jobs 

polyfills
...
. babel
  . transpiler - rewrites modern js code into previous standard
  . 2 parts
    1. transpiler program
    2. polyfills - scripts that fill in the gaps and add missing implementations
  . need to setup the transpiler and add polyfills for old engines to support modern features

js - objects
...
. used to store keyed collections of various data and more complex entities
. an object can be created with figure brackets { ... } witha an optional list of properties
  . a property is a "key: value" pair where key is a string aka property name and value can be anything 
  . imagine an object as a cabinet wiht signed files every piece of data is stored in it's file by the key
  . let user = new Object();
  . let user = {};
. { ... } - object literals
. let user = {
    name: "john",
    age: 30
  }
. propety has a key aka "name" or "identifier" before the colon ":" and a value to the right of it

angular 4
...
. transpilation
. @NgModule({
    imports: [BrowserModule],
    declarations: [JokeComponent],
    bootstrap: [JokeComponent]
  })
  export class AppModule {

  }
 . component 
   . building block of an angular app 
   . it let us create new html and link them with js classes which describe the behaviour of html tags
. interpolation
  . class JokeComponent {
      setup: string;
      punchline: string;
    }
. classes
  . blueprints for objects
  . classification
  . instructions on how to create an object
  . to create an object using a class we use the "new" keywords
  . let joke = new JokeComponent();
    . console.log(joke.setup);
    . console.log(joke.punchline);
  . constructor
    . instantiate an object
    . special class function
    . constructor() {
        this.setup = "what did the cheese say when it looked in the mirror?";
        this.punchline = "halloumi (hello me)";
      }
. string interpolation  
  . {{ }}
  . contains js which is run by angular and the output inserted in the html
  . <h1>{{setup}}</h1>
  . <p>{{punchline}}</p>
. arrays
  . Array<Object>
  . Object[]
. ngFor
  . <div class="card card-block" *ngFor="let joke of jokes">
      <h4 class="card-title"></h4>
      <p class="card-text"></p>
    </div>
. directive 
  . structural directive since it changes the structure of the DOM

books
...
. design patterns: elements of reusable object-oriented software by e.gamma, r.helm, r.johnson, j.vlissides
. object-oriented analysis and design with applications by g.booch

css
...
. id's
  . id's and classes are 'hooks'
  . id's are unique
  . each element can only have 1 id
  . each page can only have 1 element with that id
  . like a serial number
  . http://yourdomain.com#comments will auto scroll the page to show that element
. classes
  . classes are not unique
  . you can use the same class on multiple elements
  . you can use multiple classes on the same element
  . like a product bar code
. classes and id's don't have any styling info to them all by themselves they require css to target them and apply styling
. elements can have both id and class
  . <li id="comment-27299" class="item">
. you can do the same thing with id and class css don't carriers
. js - getElementById
. html attribute vs dom property
  . changing html doesn't auto update the webpage until refresh
  . changing dom instantly updates the webpage
  . when we write [hidden] we are manipulating the DOM property and not the HTML attribute 
. input property binding
  . <p class="card-text" [hidden]="true">{{joke.punchline}}</p>
  . with the [] we are binding to an input of a component
. output property binding
  . with the () we are binding to an output of a component
. object methods, 'this'
  . objects are usually created to represent entities of the real world like users, orders and so on
  . let user = {
      name: "John",
      age: 30
    };

    user.sayHi = function() {
      alert("hello!");
    };

    user.sayHi();
  
  . a function that is the property of an object is called its method
. oop  
. closure
. lexical environment
  . every running function, code block and the script as a whole have an associated object named lexical environment
  . the lexical environment object consists of 2 parts
    1. environment record - an object that has all local variables as it's properties and some other info like the value of this
    2. a reference to the outer lexical environment, usually the one associated with the code lexically right outside of it (outside of the current figure brackets)
. iife - immeidately-invoked function expressions
  . (function() {

      let message = "hello";

      alert(message);

    })();
. array - 2 ways to create
  1. let arr = new Array();
  2. let arr = [];
. array - methods
  . push - appends an element to the end
  . shift - get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st
  . pop - takes an element to the end
  . unshift - adds items to the beginning
. JSON.stringify
  . converts objects into JSON
  . JSON.parse to convert JSON back to an object
  . objects skipped 
    . function properties methods
    . symbolic properties
    . properties that store undefined
. prototypal inheritance
  . [[Prototype]] - hidden property that's either null or references another object that object is called "a prototype"
  . __proto__ is not the same as [[Prototype]] that's a getter/setter for it 
. try catch syntax 2 main blocks
  1. first the code in try is executed
  2. if there were no errors then catch(err) is ignored the esecution reaches the end of try and then jumps over catch
  3. if an error occurs then try execution is stopped and the control flows to the beginning of catch(err) the err variable conta9ins an error object with detials about what is happening
. getElementById
  . let elem = document.getElementById('elem');
. closures
  . one of the nmost powerful features of js 
  . js allows for the nesting of functions and grants the innter functions full access to all the var and functions defined inside the outer function (and all the other var and functions that the outer functions has access to).
  . however, the outer function does not have access to the var and functions defined inside the inner function.
  . this provides a sort of security for the var of the inner functions.
  . also since the inner function has access to the scope of the outer function, the var and functions defined in the outer function will live longer thatn the duration of the intter function execution
  . if the inner function manages to survive beyond the life of the outer function
  . a closure is created when the inner function is somehow made available to any scope outside the outer function.
  . pitfalls - if an enclosed function defines a var with the same name as the var in the outer scope, there is no way to refer to the var in the outer scope again 

node_modules/.bin/ng lint 
...
. applicatnt.component.ts

  . 21.84 trailing whitespace [kk] jh
  . 21.64 t [kk] jh
  . 474.119 t [kk] jh
  . 442.86 missing whitespace [kk] jh
  . 470.24 m [kk] jh
  . 483.22 m [kk] jh
  . 452.63 m [kk] jh
  . 452.65 m [kk] jh
  . 474.17 m [kk] jh
. payment.component.ts
  . 165.1 trailing whitespace jh
  . 649.1 t 

js notes
...
. is object oriented
. use prototypical inheritance

angular 4 event binding
...
. (focus)
. (blur)
. (submit)
. (scroll)
. (cut)
. (copy)
. (paste)
. (keydown)
. (keypress)
. (keyup)
. (mouseenter)
. (mousedown)
. (moouseup)
. (click)
. (dblclick)
. (drag)
. (dragover)
. (drop)

js notes
...
. 6 primitive data types in js
  1. string
  2. number
  3. boolean
  4. symbol
  5. null
  6. undefined
. object is another data type
  var user = {
    firstName: 'Justin',
    lastName: 'Jones'
  }
  . examples of js built-in objects
    . Array
    . math
    . JSON
  . prototypical inheritance
    function User(firstName, lastName) {
      this.firstName = firstName;
      this.lastName = lastName;
    }

    User.prototype.getFullName = function() {
      retrun this.firstName + " " + this.lastName;
    }
  . closure
    . inner function has access to the outer enclosing function's variables

bootstrap 3
...
. media queries
  . consists of an optional media type and zero or more expressions that limit the style sheets' scope by using media features, such as width, height, and color.
  . added in css3 let the presentation of content be tailored to a specific range of output devices without having to change the content itself.

js objects
...
. var obj = {};
. var nextObj = Object.create(Object.prototype);
. var lastObj = new Object();

css preprocessor
...
. variable
. loops
. functions
. types
  . SASS
  . less

NG2+ CSS SASS
...
. vew encapsulation
  . default emulated mode
    . scope and encapsulation
  . none
    . import { Component, ViewEncapsulation } from '@angular/core';
    . @Component({
        encapsulation: ViewEncapsulation.None
      })
    . global style
  . native
    . use native shadow DOM

shadow DOM
...
. ability of the browser to include a subtree of DOM elements into the rendering of a document, but not into the main document DOM tree.

PrimeNG
...
. angular ui components
. 3 step process to use component
  1. import component app.module.ts
  2. add markup place component on your page
  3. code backing data provide data for component if required

wip
...
. AlltimesComponent - <app-alltimes>
. DashboardComponent - <app-dashboard>
. ProfileComponent - <app-profile>
. ProjectsComponent - <app-projects>
. SettingsComponent - <app-settings>
. TimesheetComponent - <app-timesheet>

svg
...
. scalable vector graphics
. xml code
. when to use svg
  . logos 
  . icons 
  . charts and graphs 
. how to create an svg
  . inkscape
  . adobe illustrator
  . sketch
.  <svg height="100" width="100">
   <circle cx="50" cy="50" r="50" fill="#ff0000" />
   </svg>
. how to use svg
  . <img>
  . <embed>
  . <object>
  . <iframe>
  . inline <svg>
. xml instructions on how image should look
. svg layout
  . canvas
  . viewport - narrow focus
  . viewBox - controls zoom level
    . x coord 
    . y coord
    . width
    . height
  . svg property
    1. shapes
    2. filters
    3. gradients

  D3 - data visualization js and svg
  ...

  em and other style best practices
  ...
  . an em is a unit in the field of topography
  . 1 em in a 16 point typeface is 16 points
  . a font size of 1em is nice for body copy
  . a font size of 1.2em is larger than a size 16 font
  . use ems to make scalable style sheets
  . always use em to set font sizes
  . div menu { padding: 1.5em; }
  . only use absolute length units when the physical characteristics of the output medium are known
  . use floating elements instead of tables
    DIV.menu {
      float: right;
      width: 15em;
    }
  . body { font-family: "Gill Sans", sans-serif }
  . use nubmers, not names, for colors
  . css supports 16 color names
    01. aqua 
    02. black
    03. bule 
    04. fuchsia 
    05. gray 
    06. green 
    07. lime 
    08. maroon 
    09. navy 
    10. olive 
    11. purple
    12. red 
    13. silver 
    14. teal 
    15. yellow 
    16. white 

    css 
    ...
    . box model
      . size
      . position
      . properties
      . border edge
      . margin edge
      . each box is composed of four parts or areas defined by their edges
        . content edge
        . paddding edge
        . border edge
        . margin edge
    . #menu - identify by "id"
    . .bookTitle - identify by "class" name

js notes
...
. this keyword refers to an object which ever object that is executing the code - global object
. comment out "//"
. way to create objects
  var cat = Object.create(Object.prototype,
{
	name: {
		value: 'fluffy',
		enumerable: true,
		writable: true,
		configurable: true
	},
	color: {
		value:'white',
		enumerable: true,
		writable: true,
		configurable: true
	}
})

es6 
...
. use class to create
  class Cat {
	  constructor(name, color) {
		  this.name = name;
		  this.color = color;
	  }
  }
 
js notes 
...
. you can call an object value 2 ways
  1. display(cat.color);
  2. display(cat['color']);  
. print out PropertyDescriptor
  . display(Object.getOwnPropertyDescriptor(cat, 'name'));
  . setting enumerable to false affects JSON.stringify results
  . Object.defineProperty(cat, 'name', {enumerable: false});
    . if false then cannot serialize it JSON
  . 3 things if you make a property configurable: false
    1. you cannot change the enumerable attribute
    2. you cannot change the configurable attribute
    3. you cannot delete the property
    . you can change the property's writable attribute
    . getters and setters
      . getters
        . Object.defineProperty(cat, 'fullName',
            {
              get: function() {
                return this.name.first + " " + this.name.last
              }
            })

          display(cat.fullName);
      . setters
        . Object.defineProperty(cat, 'fullName',
            {
              get: function() {
                return this.name.first + " " + this.name.last
              },
              set: function(value) {
                var nameParts = value.split(' ');
                this.name.first = nameParts[0];
                this.name.last = nameParts[1];
              }
            })

          cat.fullName = 'muffin top';
          display(cat.fullName);
    . js object property summary
      . writable
      . enumerable
      . configurable
      . getters / setters

prototypes.sc
...
var arr = [
    'red',
    'blue',
    'green'
];

Object.defineProperty(arr, 'last', {get: function() {
    return this[this.length-1];
}});
var last = arr.last;
display(last);

array-prototypes.sc
...
var arr = [
    'red',
    'blue',
    'green'
];

Object.defineProperty(Array.prototype, 'last', {get: function() {
    return this[this.length-1];
}});
var last = arr.last;

var arr2 = ['one', 'two', 'three', 'four', 'five'];
display(arr.last);
display(arr2.last);

what is the "Array" object?
...
. function Array() {[native code]}
. shorthand to call the Arry constructor with new

what is a prototype
...
. a prototype is an object that exists in every function in js
. sc
...
var myFunc = function() {

};

display(myFunc.prototype);
. in browser shows "{}" an empty object

objects do not have a prototype property
. if you try to view an object's prototype it's "undefined"
. object does have a "__proto__" property however
. sc
...
var cat = {name: 'fluffy'};
display(cat.__proto__);
. this displays "Object{}" in browser

so ...
...
. "prototype" property belongs to js functions
. "__proto__" property belongs to js objects
. a functions prototype ad an objects prototypes are used differently

[js]
...
. A FUNCTIONS PROTOTYPE: 
  . a function's prototype is the object instance that will become the protype for all objects created using this function as a constructor.
. AN OBJECT'S PROTOTYPE:
  . an object's prototype is the object instance from which the object is interited.
. a prototype is an object
. an object's instance is used before it's prototype is used. the prototype is only used if an object's instance does not have what the prototype has
. prototypes are objects that are pointers created in memory
. all prototypes inherit from Object - Object does not have prototype
. to setup cat functio to inherit from animal function for example >>>
  . Cat.prototype = Object.create(Animal.prototype);
  . Cat.prototype.constructor = Cat;

sample js class like code for inheritance sc
...
"use strict";

class Animal {
    constructor(voice) {
        this.voice = voice || 'grunt';
    }

    speak() {
        display(this.voice);
    }
}

class Cat extends Animal {
    constructor(name, color) {
        super('Meow');
        this.name = name;
        this.color = color;
    }
}

var fluffy = new Cat('fluffy', 'white');
fluffy.speak();

js
...
. primitive type
  . number
  . string
  . boolean
  . values get copied and passed around alot each var has a memory storage space
. js works in 2 passes
  . 1st pass picks up global var and looks for variables
  . 2nd pass execution
. hoisting access to variables before they are declared
  1. pass one - look for identifiers
  2. pass two - executions occurs
  . describe behavior because it's as if the declarations are lifted (hoisted) to the top of the function before execution
  . during hoisting, hoisted variables are set to undefined
  . can be confusing
. arrays and reference types
  . arrays and objects are reference types
  . what is reference types?
    . array
    . dates 
    . regular expressions
    . object
    . var o = {
        name: 'jia';
      }
      . memory created for "o" but only a pointer points to an unknown memory location
      . memory created for "o2" but o2 = o points to the same pointer that points to the memory location
    . common types
      . objects
      . Arrays  
      . dates
      . RegExp's 
      . Functions 
      . Primitives (via Wrappers) 

array in js
...
. var entries = new Array('trains', 42, true);
. array content can be different types
. another way to do it
  . var entries = ['trains', 'planes', 'autos'];
. ratings.pop() - last value
. ratings.shift() - first value
. ratings.unshift(3) - 3 gets added to the [0] left position
. ratings.concat(7,8) - add to end of current ratings array
. ratings.slice(2)  - contains position 3 and pass that to the end of the array
. var ratings = [1,2,3,4];
  var newRatings = ratings.slice(1,3);
  console.log(newRatings.toString()); 
  answer = 2,3 (starts at first position all the way to position before last number or last number - 1)

date
...
. date
  . var dt = new Date();
    document.write(dt.toDateString());
. time
  . var dt = new Date();
    document.write(dt.toTimeString());
. year
  . var dt = new Date();
    document.write(dt.getFullYear());

regular expressions
...
. how to set up a REgular expression
  var blogText = "sam i am";
  var pattern = new RegExp('am', 'g');
  document.write(pattern instanceof RegExp);

prototype
...
. every js object has a prototype property - but we don't alwyas have access to it
. maintained internally by js and only accessible occationally
. the prototype property is simply an object

jade 
...

skeleton css 
...
. http://getskeleton.com/

generator ui prototype
...
https://github.com/dfernandez79/generator-ui-prototype

google polymer web components
...
. https://www.polymer-project.org/

Plunker
...
. https://plnkr.co 

Kendo ui
...

html5 - template
...
. <template> tag
. power of template is that it can be cloned an used 
. 3 important things to understand about the template tag
  1. markup inside is "inert" does nothing until cloned and used - non of the assets will run until cloned and used
  2. hidden from selectors
  3. flexible placement - be consistent where you place the template code
. how to activate a template? 3 steps
  1. var template = document.querySelector('#mytemplate');
  2. var clone = document.importNode(template.content, true);
  3. document.body.appendChild(clone);
. sc
...
var template = document.querySelector('template');
var clone = document.importNode(template.content, true);
document.body.appendChild(clone);

setps to inject data into the template
...
1. get a ref to the template
   . var template = document.querySelector('template');
2. use document.importNode to clone the template's content
   . var clone = document.importNode(template.content, true);
3. change the target element within the template as desired
   .  clone.querySelector('.verb').textContent  = 'awesome';
4. append element to the page
   . document.body..appendChild(clone);

sc
...

<template>
  <p>
    this <span class="adjective"></span> template has 
    been copied <span class="number-of-copies"></span> times.
  </p>    
</template>

<button onclick="copyTemplate()">Copy Template</button>

<script>

var numberOfCopies = 0;

function copyTemplate() {
  var template = document.querySelector('template');
  var clone = document.importNode(template.content, true);
  // replace placeholders
  clone.querySelector('.adjective').textContent = "awesome";
  clone.querySelector('.number-of-copies').textContent = ++numberOfCopies;

  document.body.appendChild(clone);
}

</script>

sc - how to handle nested templates
...

<template id="header">
  <div>Header</div>
  <template id="body">
    <div>Body</div>
  </template>
</template>

<script>

var template = document.querySelector('#header');
var clone = document.importNode(template.content, true);
document.body.appendChild(clone);

var template = document.querySelector('#body');
var clone = document.importNode(template.content, true);
document.body.appendChild(clone);

</script>

polymer.js
...

web components
...
. custom elements - component declaration
. templates - component template declaration
. shadow DOM - encapsulation of the component

polymer - google
...
. web component tools
. https://www.polymer-project.org 

Bower
...
. https://bower.io
. package Manager 
. websites are made of lots of things - frameworks, libraries, assets, and utilities.  bower manages all these things for you.
. bower works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you're looking for.

html import
...
. <link rel="import" href="../polymer/polymer-element.html">

shadow DOM 
...
. lets you add scoped DOM tree inside an element, with local styles and markup that are decoulpled from the rest of the web page.
. shadow dom is based on the shadow dom spec and works with native shadow dom where available

real mixins with js classes
...

geolocation in html5
...

kendo ui
...
. kendo ui is a js framework for building modern web apps

D3
...
. <script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
sc
...
<script>
  d3.select("body")
  .append("svg")
  .append("rect")
  .attr("width",10)
  .attr("height",20)
  .style("fill", "blue")
</script>

. principles
  . selections
    . d3.select("body") // selects the <body> html element
  . append operators
    . .append("svg") // adds new <svg> object

sc - barchart example
...

<script>

var w = 100;
var h = 100;
var padding = 2;
var dataset = [50, 10, 15, 20, 25];
var svg = d3.select("body")
              .append("svg")
              .attr("width",w)
              .attr("height",h);
svg.selectAll("rect")
  .data(dataset)
  .enter()
  .append("rect")
    .attr("x",function(d,i){
      return (i * (w/dataset.length));
    })
    .attr("y",function(d) {
      return h - (d*4);
    })
    .attr("width",( (w/dataset.length)-padding))
    .attr("height",function(d){
      return (d*4);
    });      

kpi
...
. key performance indicators

svg - draw bar chart / color bars / label bars with data values - sc
...


var w = 300;
var h = 100;
var padding = 2;
var dataset = [5, 10, 14, 20, 8, 11, 25, 22, 18, 7];

var svg = 
d3.select("body").append("svg")
          .attr("width",w)
          .attr("height",h);

function colorPicker(v) {
  if (v <= 15) {
    return "#c1c1c1";
  }
  else if (v>15) {
    return "#ff0033";
  }
}

svg.selectAll("rect")
    .data(dataset)
    .enter()
    .append("rect")
.attr({
  x: function(d, i) {
    return i * (w / dataset.length);
  },
  y: function(d) {
    return h - (d*4);
  },
  width: (w / dataset.length) - padding,
  height: function(d) {
    return d * 4;
  },
  fill: function(d) {
    return colorPicker(d);
  }
});

svg.selectAll("text")
  .data(dataset)
  .enter()
  .append("text")
  .text(function (d) {
    return d;
  })
  .attr({
    "text-anchor": "middle",
    x: function(d,i) {
      return i * (w / dataset.length) + (w/dataset.length - padding)/2;},
    y: function (d) {
      return h - (d * 4) +  14;
    },
    
  });

svg - line sample - sc
...
var h = 100;
var w = 200;

monthlySales = [
  {"month":10, "sales":20},
  {"month":20, "sales":14},
  {"month":30, "sales":20},
  {"month":40, "sales":21},
  {"month":50, "sales":15},
  {"month":60, "sales":22},
  {"month":70, "sales":9},
  {"month":80, "sales":6},
  {"month":90, "sales":23},
  {"month":100, "sales":7}
];

var lineFun = d3.svg.line()
  .x(function(d) {
    return d.month*2;
  })
  .y(function(d) {
    return d.sales;
  })
  .interpolate("linear");

  var svg =
    d3.select("body").append("svg").attr({width:w, height:h});

  var viz = svg.append("path")
    .attr({
      d: lineFun(monthlySales),
      "stroke": "red",
      "stroke-width":2,
      "fill": "none"
    });

</script>

scatter plot 
...
. put  data points ou t to see where they fall?

svg - scatter plot with min max values - sc
...
var h = 350;
var w = 400;

monthlySales = [
  {"month":10, "sales":100},
  {"month":20, "sales":130},
  {"month":30, "sales":250},
  {"month":40, "sales":300},
  {"month":50, "sales":265},
  {"month":60, "sales":225},
  {"month":70, "sales":180},
  {"month":80, "sales":120},
  {"month":90, "sales":145},
  {"month":100, "sales":130}
];

// KPI color
function salesKPI(d) {
  if (d>=250) {
    return "#33cc66";
  } 
  else if (d<250) {
    return "#c1c1c1";
  }
}

function showMinMax(ds, col, val, type) {
  var max = d3.max(ds, function(d) {
    return d[col]; 
  });
  var min = d3.min(ds, function(d) {
    return d[col];
  });

  if (type=='minmax' && (val == max || val == min)) {
    return val;
  } else {
    if (type == 'all') {
      return val;
    }
  }
}

// create our svg
var svg = d3.select("body").append("svg").attr({width:w,height:h});

// add dots
var dots = svg.selectAll("circle")
  .data(monthlySales)
  .enter()
  .append("circle")
.attr({
  cx: function(d) {
    return d.month*3; 
  },
  cy: function(d) {
    return h-d.sales;
  },
  r: 5,
  "fill": function(d) {
    return salesKPI(d.sales);
  }
});

// add labels
var labels = svg.selectAll("text")
  .data(monthlySales)
  .enter()
  .append("text")
.text(function(d) {
  return showMinMax(monthlySales, 'sales', d.sales, 'minmax');
})
.attr({
  x: function(d) {
    return (d.month*3)-25;
  },
  y: function(d) {
    return h-d.sales;
  },
  "font-size": "12px",
  "fill":"#000000",
  "text-anchor": "start"
});

project notes 
...

. [1629:deploy to prod] - add ui logic to make credit manditory for certain sceanarios
. [1635:deploy to prod] - update ui changes with the static changes
. [1767:deploy to prod] - api update to accommodate discount surcharge edit
. 1772 - update ui and api for coverage edits
. 1773 - update ui and api to handle the payment plans for pho to display correctly

d3 - sc for line chart with total and average (csv file import)
...
var h=100;
var w=400;
var ds; // global var for data
var salesTotal = 0.0;
var salesAvg = 0.0;
var metrics = [];

function buildLine() {
  var lineFun = d3.svg.line()
    .x(function(d) {
      return ((d.month - 20130001)/3.25);
    })
    .y(function(d) {
      return h - d.sales;
    })
    .interpolate("linear");

    var svg = d3.select("body")
      .append("svg")
      .attr({ width:w, height:h });

    var viz = svg.append("path")
      .attr({
        d: lineFun(ds),
        "stroke": "purple",
        "stroke-width": 2,
        "fill": "none"
      });
}

function showTotals() {

  var t = d3.select("body").append("table");

  // get total
  for (var i = 0; i < ds.length; i++) {
    salesTotal += ds[i]['sales']*1; // convert to number
  }

  salesAvg = salesTotal / ds.length;

  // add metrics to array
  metrics.push("Sales total: "+ salesTotal);
  metrics.push("Sales avg: "+ salesAvg.toFixed(2));

  // add total to table
  var tr = t.selectAll("tr")
    .data(metrics)
    .enter()
    .append("tr")
    .append("td")
    .text(function(d){
      return d;
    });
}

d3.csv("MonthlySales.csv", function(error, data) {
  if(error) {
    console.log(error);
  } else {
    console.log(data); // we're golden
    ds = data;
  }

  buildLine();
  showTotals();

});

sprint name 
...
. UnPHOGettable

. PHONominal

. PHOnatic

. PHO Far PHO Good

. PHO Close

. 17 PHO Ever

d3 - sc - lne chart json with different categories 
...
var h=100;
var w=400;

function buildLine(ds) {
  var lineFun = d3.svg.line()
    .x(function(d) {
      return ((d.month - 20130001)/3.25);
    })
    .y(function(d) {
      return h - d.sales;
    })
    .interpolate("linear");

    var svg = d3.select("body")
      .append("svg")
      .attr({ width:w, height:h });

    var viz = svg.append("path")
      .attr({
        d: lineFun(ds.monthlySales),
        "stroke": "purple",
        "stroke-width": 2,
        "fill": "none"
      });
}

function showHeader(ds) {
  d3.select("body").append("h1")
    .text(ds.category + " Sales (2013)");
}

d3.json("MonthlySalesbyCategoryMultiple.json", function(error, data) {
  if(error) {
    console.log(error);
  } else {
    console.log(data); // we're golden
  }

  data.contents.forEach(function(ds) {
    console.log(ds);
    showHeader(ds);
    buildLine(ds);
  })

});

d3 notes 
...
. the basics
. working with data
. mappings
. basic charting
. enhancing your viz
. pulling it all together

web api notes
...
. https://data.gov
. same origin policy 
. https://api.github.com/repos/bsullins/d3js-resources/contents/monthlySalesbyCategoryMultiple.json
. encoding "base64"
. Windows.atob();

d3 sc json from github api 
...
var h=100;
var w=400;

function buildLine(ds) {
  var lineFun = d3.svg.line()
    .x(function(d) {
      return ((d.month - 20130001)/3.25);
    })
    .y(function(d) {
      return h - d.sales;
    })
    .interpolate("linear");

    var svg = d3.select("body")
      .append("svg")
      .attr({ width:w, height:h });

    var viz = svg.append("path")
      .attr({
        d: lineFun(ds.monthlySales),
        "stroke": "purple",
        "stroke-width": 2,
        "fill": "none"
      });
}

function showHeader(ds) {
  d3.select("body").append("h1")
    .text(ds.category + " Sales (2013)");
}

d3.json("https://api.github.com/repos/bsullins/d3js-resources/contents/monthlySalesbyCategoryMultiple.json", function(error, data) {
  if(error) {
    console.log(error);
  } else {
    console.log(data); // we're golden
  }

  var decodedData = JSON.parse(window.atob(data.content));

  console.log(decodedData.contents[0]);
  console.log(decodedData.contents[1]);

  

  decodedData.contents.forEach(function(ds) {
    console.log(ds);
    showHeader(ds);
    buildLine(ds);
  })
  

});

 d3 scales 
 ...
 . functions that map from an input domain to an output range

 d3 - sc - json data from github api with x and y scale applied 
 ...
 var h=50;
var w=300;

function buildLine(ds) {

  var xScale = d3.scale.linear()
                  .domain([
                    d3.min(ds.monthlySales, function(d) {
                      return d.month;
                    }),
                    d3.max(ds.monthlySales, function(d) {
                      return d.month;
                    })
                  ])
                  .range([0, w]);

  var yScale = d3.scale.linear()
                  .domain([
                    0,
                    d3.max(ds.monthlySales, function(d) {
                      return d.sales;
                    })
                  ])
                  .range([h, 0]);

  var lineFun = d3.svg.line()
    .x(function(d) {
      return xScale(d.month);
    })
    .y(function(d) {
      return yScale(d.sales);
    })
    .interpolate("linear");

    var svg = d3.select("body")
      .append("svg")
      .attr({ width:w, height:h });

    var viz = svg.append("path")
      .attr({
        d: lineFun(ds.monthlySales),
        "stroke": "purple",
        "stroke-width": 2,
        "fill": "none"
      });
}

function showHeader(ds) {
  d3.select("body").append("h1")
    .text(ds.category + " Sales (2013)");
}

d3.json("https://api.github.com/repos/bsullins/d3js-resources/contents/monthlySalesbyCategoryMultiple.json", function(error, data) {
  if(error) {
    console.log(error);
  } else {
    console.log(data); // we're golden
  }

  var decodedData = JSON.parse(window.atob(data.content));

  console.log(decodedData.contents[0]);
  console.log(decodedData.contents[1]);

  

  decodedData.contents.forEach(function(ds) {
    console.log(ds);
    showHeader(ds);
    buildLine(ds);
  })
  

});

(198) front-end web dev quick start with html5, css, and js - shawn w - 3 (8/23/17) [1,2,3,4]
(199) chrome dev tools - john s - 2 n(8/23/17) [1,2,3,4,5]
(200) practical design patterns in js - jonathan mills - 3 (8/23/17) [1,2,3,4,5,6]
(201) hands-on responsive design using a css preprossor - paul c - 2 (8/23/17) [1,2,3,4,5,6,7,8,9,10]
(202) simplifying CSS in VS with SASS - jason r - 1 (8/24/17) [1,2,3,4]
NG2+ (203) styling angular apps - brian t - 1 (8/24/17) [1,2,3,4,5,6]
204 - html5 web component fundamentals - cory h (8/24/17)
NG2+ (205) - building beautiful angular apps with PrimeNG - glen s - 3 (8/24/17) [1,2,3.1,4,5,6,7,8]
(206) svg fundamentals - brian tree
se - 1 (8/24/17) [1,2,3,4,5]
(207) js objects and prototypes - jim c - 1 (8/24/17) [1,2,3(3)]
(208) modern async js - wes higbee - 6 (8/28/17) [1,2,3,4,5,6,7,8]
(209) getting started with reactive programming using RxJS 5 - scott a - 1 (8/28/17) [1,2,3,4]
210 - javascript from scratch - jessie l - 1 (8/28/17) [1,2,3,4,5,6]
(211) rapid js training - mark z - 5 (8/28/17) [1,2,3,4,5.4,6,7,8,9,10,11]
(212) html5 web component fundamentals - cory h - 5 (8/29/17) [1,2,3,4,5,6,7,8,9]
213 - getting started with polymer.js - bill s - 1 [1,2,3,4,5,6]
214 - working with polymer.js element - bill s - 1 [1,2,3,4,5]
215 - buyilding a web app with polymer.js and material design - bill s - 2 [1,2,3,4,5,6,7,8,9,10]
216 - intro to kendo ui - keith b - 2 [1,2,3,4,5,6]
217 - dev a real world app with kendo ui - keith b - 1 [1,2,3,4]
218 - data analysis fundamentals
219 - business dashboards
220 - force layout graphs in d3 - ben s - 2 [1,2,3,4,5,6,7,8]
221 - d3: the big picture - ben s - 1 [1,2,3,4,5,6]
222 - geospatial mapping with d3 - ben s - 2 [1,2,3,4]
223 - real-time web dashboards with highcharts - ben s - 3 [1,2,3,4,5,6,7,8]
224 - data analytics: hands on - ben s - 5 [1,2,3,4,5,6,7,8,9,10,11,12]
225 - business dashboard fundamentals - ben s - 3 1,2,3,4,5,6,7,8]
(226) - play by play: design sprint - practical - nate w and richard b - 1 -[1,2,3,4]
227 - hands-on responsive web design 2: responsive images and sliders - paul c - 1 [1,2,3,4,5,6,7,8,9]
228 - oop with go - mike v s - 1 [1,2,3,4,5,6]
(229) - getting started with es2017/es8 - roland g - 1 [1,2,3,4,5,6]
230 - moving forward with mongoose.js - mark s - 1 [1,2,3,4,5,6,7,8,9]
231 - intro to docker on windows with vs 2017 - marcel d v - 4 [1,2,3,4,5,6,7]
(232) - fundamentals of functional programming in js - nate t - 1 - [1,2,3, 4,5,6]
233 - creating vr experiences with js - alex m - 1 [1,2,3,4,5]
234 - hands-on responsive web design 1: media queries a& css preprocessors - paul c - 1 1,2,3,4,5,6,7,8]
235 - intro to inverted triangle css - jason s - 1 [1,2,3,4,5,6,7]
236 - building websites with foundation 6 - gary s - 1 [1,2,3,4,5,6,7]
237 - getting started with typescript - brice w - 3 
238 - enhancing web uis with parallax scrolling - anthony h - 1
239 - building adv js animations with GSAP - dodd s - 2
240 - what every dev must know about https - troy hunt 3
241 - a practical guide to vanilla web components - leon r - 2
242 - learn basic html5 and css3 by building your fist web page - mario d m - 2
243 - improving css with postCSS - gary s - 1
244 - ux-driven software design - dino e - 3
245 - user experience - the big picture - amber i - 2
246 - using redux to manage state in angular - hendrik s - 1
247 - hands-on js project: json - paul c - 1
248 - html5 fundamentals - craig s - 3
249 - pbp: understanding api functionality through swagger - john papa - 1
250 - js async module definition (AMD) e3xplained - kevin m - 3
251 - writing functional js using ramda - thiago t - 2
252 - hands-on js project: solar calc - paul c - 2
253 - security for hackers and dev: fuzzing - dr. jared d - 2
254 - getting started with progressive web apps - bill s - 2
255 - adv typescript - brice w - 2
256 - web api design = shawn w - 2 
257 - front end web dev: get started - joe e - 3
258 - js the good parts
(259) - using the chrome dev tools - john s - 2 [1<24>,2,3,4,5]
260 - vs code - john p - 4
261 - css3 from scratch - jessy l
262 - mastering git - paolo p - 2
263 - how git works - paolo p - 1
264 - git fundamentals - mames k - 1
265 - git for vs dev - esteban g - 2
266 - adv git tips and tricks - enrico c - 2
267 - intro to git - geoffrey g - 1
268 - using git with a gui - xavier morera - 2
(269) - swagger

color
...
. http://colorbrewer2.org
. hue 
. lightness (value) 
. intensity (chroma) 
. analogous - similar shades
. complementary - opposite of color wheel 
. split complementary - opposite left and right - aka diverging scale

design sprint
...
. phases
  1. understand - ensuring the team is solving the right problem
  2. diverge - developing potential solutions to the problem
  3. converge - narrowing choices
  4. build - build a testable prototype
  5. test - testing with real end users

itcss - inverted triangle css
...
. created by harry roberts
. https://csswizardry.com
. specificity calculator - http://specificity.keegan.st

swagger
...
. config
  . net core 
    . startup

js
...
. objects
. async nature of js
. hoisting
. scope & closures 
. context & .this
. built in 10 days by brandon eich @ netscape
. js is versatile
. js is popular
. in js eveything is an object

chrome dev tools 
...
. console.log
. console.warn 
. console.error
. console.dir 
. console.time and console.timeEnd

debugger
...
. debugger;

command line api
...
. $('h1')
. $$(selection)
. $x(xpath)

chrome - element panel
...
. $0 - inspect last element

js the good parts
...
. good ideas
  . functions
  . loose typing
  . dynamic objects
  . expressive object literal notation
. bad ideas 
  . model based on global variables
. functions are first class objects
. mostly lexical scoping
. first lambda language to go mainstream
. loosely typed language so not able to detect typed errors
. powerful object literal notation
. prototypal interitance
. class free sys objects inherit from other objects
. depends on global variables for linkage
. common namespace - global object
. light weight and expressive
. comment with /* */ blocks and // lines
. reserved words
  . abstract
  . boolean 
  . break 
  . byte
  . case
  . catch
  . char
  . class
  . const
  . continue
  . debugger
  . default
  . delete
  . do
  . double
  . else
  . enum
  . export
  . extends
  . false 
  . final 
  . finally 
  . float 
  . for 
  . function 
  . goto 
  . if 
  . implements 
  . import 
  . in 
  . instanceof 
  . int 
  . interface 
  . long 
  . native 
  . new 
  . null 
  . package 
  . private 
  . protected 
  . public 
  . return 
  . short 
  . static 
  . super 
  . switch 
  . synchronized 
  . this 
  . throw 
  . throws 
  . transient 
  . true 
  . try 
  . typeof 
  . var 
  . volatile 
  . void 
  . while 
  . with 
. single number type - 46-bit floating point same as java's double
. the value NaN is a number value that is the result of an operation that cannot produce a normal result
  . NaN is not equal to any value, including itself
. js has a math object that contains a set of methods that act on numbers
. string
  . can be wrapped in single or double quotes 
  . it can contain zero or more char
  . the \ (backslash) is the escape char
. js was built at a time when unicode was a 16-bit char set so all char in js are 16 bit widermuth
. js does not have a character type - to represent a character make a string with just one character in it 
. strings have a length prop for example 'seven'.length = 5;
  . strings are immutable - once made, a string can never be changed
  . but it's easy to make new strings by concatenating other strings together with the + operators
  . 2 strings containing exactly the same char in the same order are considered to be the same string
    . 'c' + 'a' + 't' === 'cat'; true
    . strings have methods 'cat'.toUpperCase() === 'CAT';
. a compilation unit contains a set of executable statements
  . in web browsers - each <script> tag delivers a compilation unit that is compiled and immediately executed
. when used inside of a function, the var statement defines the function's private variables 
. the switch, while, for, and do statements are allowed to have an optional label prefix that interacts with the break statement
. statements tends to be executed in order from top to bottom
  . sequence of execution can be altered by
    . the conditional statements (if and switch)
      . if 
        . if statement changes the flow of the program based on the value of the expression
          . the then block is executed if the expression is truthy
          . otherwise the optional else brance is taken
      . switch
    . by the looping statements (while, for, and do)
      . while 
      ' for 
      . do 
    . by the disruptive statements (break, return, and throw)
      . break 
      . return 
      . throw 
    . by function invocation
  . a block is a set of statements wrapped in curly brackets
    . blocks in js do not create a new scope 
    . var should be defined at the top of the function not in blocks

gtd 
...
. 7 primary types of things you'll want to keep track of and manage
  1. a project list
  2. project support materials 
  3. calendared actions and info 
  4. next actions list 
  5. a waiting for list 
  6. reference materials 
  7. a someday/maybe list 

js good parts (2)
...
. falsy values
  . false
  . null 
  . undefined
  . the empty string '' or ""
  . the numberr 0
  . the number NaN
. truthy values
  . true 
  . string 'false' 
  . all objects
. switch statement - multiway branch 
. case clause contains one or more case expressions.
. while statement perform a simple loop if falsy loop will break 
. do statement is like while except that the expression is tested after the block is executed instead of before
. try statement executes a block and catches any exceptions that were thrown by the block.
. throw statement raises an exception.
. the return statement causes the early return from a function.  
  . it can also specify value to be returned. 
  . if a return expression is not specified, then the return value will be undefined 
. break statements causes an exit from a loop statement or a switch statement
. object literals are a convenient notation for specifying new objects.  
  . object literal 
  . array literal 
  . regexp literal 
. functions
. simple types of js are immutable
  . numbers
  . strings
  . booleans
  . null
  . undefined 
. objects
  . mutable keyed collections 
  . arrays, functions, regular expressions, and objects are objects 
  . container of properties where a prop has a name and vaule (any except undefined)
  . class-free
  . prototype linkage feature that allows one object to inherit the properties of another - when used well this can reduce object initialization time and memory consumption 
  . object literals
    var empty_object = {};

    var sample = {
      "first-name": "jia",
      "last-name": "huang"
    };
. update - a value in an object can be updated by assignment 
. prototype
  . every object is linked to a prototype object from which it can inherit properties 
  . all objects created from object leterals are linked to Object.prototype and object that comes standard with js 
. typeof
  . typeof flight.number
. hasOwnProperty
  . this method does not look at the prototype chain only if that object has a property itself 

pho
...
. coverageFormData.otherMemberOfHousehold

q for kev 
...
. otherMembersOfHouseholdItems: this.fb.array([]), // can it be set to 3 only? // can we use arr.slice(0,2) return elements in position 0 through 2 // arr.length = 3;
. enhancedHomePackage
. handleEnhancePackageLogic();

. enhancedHomePackage
. coverageFormData
. coverageObject
. CoverageField extends ModelField()
. getRawValue
. popover-sub-form

ting 
...
. tomorrow is not guaranteed

js good parts (3)
...
. function objects
  . objects created with object literals are linked to Object.prototype
  . function objects are linked to Function.prototype which itself linked to Object.prototype
    . its value is an object with a constructor property whose value is the function 
      . this is distinct from the hidden link to Function.prototype
  . since functions are objects, they can be used like any other value.
  . functions can be stored in variables, objects, and arrays
  . functions can be passed as arguments to functions
  . functions can be returned from functions
  . functions can have methods
  . they can be invoked
  . function objects are created with function literals
    . var add = function (a, b) {
        return a + b;
      };
    . 4 parts
      1. reserved word "function"
      2. optional second part is the function's name (anonymous - no name)
      3. parameter wrapped in parentheses
         . set of zero or more parameter names, seperated by Commas 
         . these names will be defined as var in the function
         . instead of being initialized to undefined they will be initialized to the argument supplied when the function is invoked
      4. set statement wrapped in curly brackets
         . body of the function
         . executed when the function is invoked
    . can appear anywhere that an expression can appear 
    . functions can be defined inside of other functions 
    . inner function has access to its parameters and var 
    . access to parameters and var of the functions it is nested within 
    . the function object created by a function literal contains a link to that outer context - this is called closure
      . source of enormous expressive power.

(270) - building your first api with asp.net core - kevin d - 4
...
. ASP.NET Core MVC
. MVC
  . model-view-controller
  . architectural pattern
  . loose coupling
  . separation of concerns 
  . testability 
  . reusable
  . not the full 

(271) - asp.net core with the new msbuild based tooling - wes h - 4
...

c# code
...

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace sampleapp
{
    class Program
    {

        static void Main(string[] args)
        {
            string pathw;
            pathw = @"c:\d3\d3\jiawrite.txt";
            StreamWriter writer;
            writer = new StreamWriter(pathw);
            writer.WriteLine("this is so cool");
            writer.Close();

            string path;
            path = @"c:\d3\d3\jiad3.txt";
            StreamReader reader = new StreamReader(path);
            while (reader.EndOfStream == false)
            {
                string line = reader.ReadLine();
                Console.WriteLine(line);
            }
                reader.Close();
        }
        
    }
}

js reserved words
...
. break
. case 
. catch 
. continue 
. debugger 
. default 
. delete 
. do 
. else 
. false 
. finally 
. for 
. function 
. if 
. in 
. instanceof 
. new 
. null 
. return 
. switch 
. this 
. throw 
. true 
. try 
. typeof 
. var 
. void 
. while 
. with 

ecmascript 5 reserve words
...
. class 
. const 
. enum 
. export 
. extends 
. import 
. super 

reserved in strict mode 
...
. implements 
. interface 
. let 
. package 
. private 
. protected 
. public 
. static 
. yield 
. strict mode also imposes restrictions on the use of the following identifiers
  . arguments 
  . eval 

ecmascript 3 reserved words 
...
. abstract
. boolean 
. byte 
. char 
. class 
. const 
. double
. enum 
. export 
. extends 
. final 
. float 
. goto 
. implements 
. import 
. int 
. interface 
. long 
. native 
. package 
. private 
. protected 
. public 
. short 
. static 
. super 
. synchronized 
. throws 
. transient 
. volatile 

js predefines a number of global var and functions
...
. arguments 
. Array 
. Boolean 
. Date 
. decodeURI 
. decodeURIComponent 
. encodeURI
. encodeURIComponent 
. Error
. eval 
. EvalError 
. Function 
. Infinity 
. isFinite 
. isNaN
. JSON 
. Math 
. NaN 
. Number 
. Object 
. parseFloat 
. parseInt 
. RangeError 
. ReferenceError 
. RegExp 
. String 
. SyntaxError 
. TypeError 
. undefined 
. URIError 

js - primitive types
... 
. numbers
. strings 
. boolean 
. null 
. undefined 
. any js value that is not primitive is an object 

js - notes
...
. js var are "untyped" you can assign a value of any type to a var later you can assign a value of a different type to the same var 
. all numbers in js are represented as floating-point values (double type c and c++)
. string immutable ordered sequence of 16-bit values

js - escaped sequences
...
. \0 - the nul char (\u0000)
. \b - backspace (\u0008)
. \t - horizontal tab (\u0009) 
. \n - newline (\u000A)
. \v - vertical tab (\u000B)
. \f - form feed (\u000C) 
. \r - carriage return (\u000D) 
. \" - double quote (\u0022)
. \' - apostrophe or single quote (\u0027) 
. \\ backslash (\u005C) 

js string methods
...
. var s = "hello, world";
. s.charAt(0) - "h": first char
. s.charAt(s.length-1) - "d": last char 
. s.substring(1,4) - "ell": the 2nd, 3rd, 4th char 
. s.slice(1,4) - "ell": same as above 
. s.indexOf("l") - 2: position of first letter l 
. s.lastIndexOf("l") - 10: position of last letter l 
. s.indexOf("1", 3) - 3: positon of the first "l" at or after 3

















  



  














































    






    
  
 





























eof.999









  



  





































    
    

  



    














































