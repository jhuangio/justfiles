bills
...

journal
...
2017
...
. 02/21/17 - first day @ cardinals
. 06/30/17 - last day @ cardinals
. 07/24/17 - first day @ bankers

js
...
4 - behaviors
. intro
. global variables
. strict mode 
. read only properties
. deleting properties
. duplicates
. octals and hexidecimals, oh my
. with
. what is this anyway
. this is new objects 
. summary
5 - async patterns
. intro
. callbacks
. promises 
. es6 and babel
. async - await
. summary
6 - production code 
. intro 
. npm settings 
. environmental variables
. cross platform concerns
. simplify your world

linkedin
...
"Performing HTTP requests (AJAX) Requests throught a Restful JSON API."
"Elasticsearch" - no sql document based db

links
...
Material Design Home Page 
https://material.angular.io/

Material Design Icon Page
https://materialdesignicons.com/

Angular 4 Material Tutorial >>>
https://www.youtube.com/watch?v=UnKsoCeTdEI

jshint >>>
jshint.com

learn javascript deeper >>>
https://medium.freecodecamp.com/what-to-learn-in-2017-if-youre-a-frontend-developer-b6cfef46effd

functional javascript ebook >>>
https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch1.html

beginning javascript >>>
ftp://91.193.236.10/pub/docs/linux-support/programming/JavaScript/[Wiley.%20Wrox]%20-%20Beginning%20JavaScript,%204th%20ed.%20-%20[Wilton,%20McPeak].pdf

blink electric skateboards >>>
https://www.actonglobal.com/product/blink-qu4tro/

visual studio teams >>>
app.vssps.visualstudio.com 
https://cardinalsolutions.visualstudio.com

angular material and cli >>>
http://candordeveloper.com/2017/04/25/how-to-create-dynamic-menu-and-page-title-with-angular-material-and-cli/

angular2 cli >>>
https://dustinewers.com/angular-cli-with-net-core/

.net core from scratch >>>
https://jonhilton.net/2016/10/06/adding-web-api-to-your-net-core-application/

barbara oakley: "learning how to learn" >>>
https://www.youtube.com/watch?v=vd2dtkMINIw

>>> you don't know js - kyle simpson
>>> https://github.com/specter01wj/Book-you_dont_know_js

notes
... 

Expandacraft Gulfport
https://www.youtube.com/watch?v=c0LMBrXAVJE
5102 Gulfport Blvd S. Gulfport, FL 33707

HoverboardX KooWheel Electric Skateboard

06.02.17 - node server
...
const http = require('http');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-type', 'text/plain');
    res.end('Hello World!');
});

server.listen(port, hostname, () => {
    console.log('Server started on port '+port);
});

06.02.17 - github notes
...
01. push changes
03. commit changes
04. sync

06.02.17 - setup node dev http server
...
01. install node
02. create project folder
03. cmd prompt run "npm init" to install node_modules folders/files
04. cd to your project folder for example c:\catjia\bebe
05. run "node c:\catjia\node_modules\http-server\bin\http-server

test to see if x exists >>>
. if(typeof x !== 'undefined'){
    console.log('Exist');
} else {
    console.log('Not Exisit');
}

strict mode >>>
instert at top of code >>>
'use strict';

iife >>>
immediately invoked function expression >>>

format numbers to 2 decimal points >>>
document.write(parseFloat(jia(48,793)).toFixed(2));

use \ backslash to escape a character >>>
in front of what you want escaped for example >>>
'Peter O\'Toole'

naming convention - the Hungarian notation >>>
beginning of name is a 3 letter code for data type for example >>>
intJia

convert string to number >>>
var x = "0";
var y = parseInt(x) + 2; (answer is 2)

how to declare a new array >>>
var myArray = new Array();

what is SCOPE , it is the extent of a variable's availability >>>

error handling >>>
try ... catch statement

joining arrays >>>
the concat() method

modern web developer >>>
Javascript - typescript, es2017, coffeescript, jsx/tsx
libraries / frameworks - RxJS, jQuery, Handlebars, Angular, React
Architecture - MVC, Redux, Flux
Module Loading System / Package Managers - System.js, AMD, JSPM, Bower
Build Pipelines - Webpack, Babel, Traceur, Minifiers, Grunt/Gulp
CSS - LESS SASS

melissa swymer - (813) 944-8315

tools of titans
tim ferris

axis of awesome 4 or 5 chords play almost every pop song

stickk dotcom

perfection is achieved not when there's nothing more to add but when there's nothing more to take away

the 9 habits to stop now - the not to do list
1. do not answer phone calls from unknown phone numbers
2. do not email first thing in the morning or last thing at night
email can wait until after you complete one important thing first
3. do not agree to meetings or calls with no clear agenda or endtime
no meeting or calls should last more than 30 mins
4. don't check email constantly check @ set times twice per day
5. 
6. do not overcommunicate with low profit high maintenance customers
7. 
8. do not carry a digital leash 24 x 7 - sat leave phone at home
9. 

focus on top goals of the day instead of
manufactured emergencies
defining the few things that can change your business and life
think harder not work harder

crack hit aha moment

kato stoic

pluralsight courses
...

VR
...
. Creating VR Experiences with JavaScript by Alex Mackey

ASP.NET
...
01. ASP.NET Core: The MVC Request Life Cycle by Alex Wolf
02. ASP.NET Core wiht the New MSBuild Based Tooling by Wes Higbee

typescript
...
. Getting Started with typescript by Brice Wilson (3h8m)
. Using Visual Studio Code for ASP.NET Core Projects by Shawn Wildermuth (2h26min)
. typescript fundamentals by dan wahlin and john papa (4h25m)
. a practical start with typescript by roland guijt (1h39m)

angular 2
...
. angular 2: getting started by deborah kurata (5h26m)
. angular 2 fundamentals by jim cooper and joe eames (9h59m)

RxJS
...
. getting started with reactive programming using rxjs by scott allen (1h52m)

sharepoint
...
. sharepoint framework - getting started by sahil malik (2h16m)

REST API
...

. javascript objects and prototypes by jim cooper (48min)


>>>
xsl: for sharepoint
>>>

<!--
This section is the set up and can be used at the top of any external XSLT stylesheet file
-->
<xsl:stylesheet
xmlns:x="http://www.w3.org/2001/XMLSchema"
xmlns:d="http://schemas.microsoft.com/sharepoint/dsp"
version="1.0"
exclude-result-prefixes="xsl msxsl ddwrt"
xmlns:ddwrt="http://schemas.microsoft.com/WebParts/v2/DataView/runtime"
xmlns:asp="http://schemas.microsoft.com/ASPNET/20"
xmlns:__designer="http://schemas.microsoft.com/WebParts/v2/DataView/designer"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:msxsl="urn:schemas-microsoft-com:xslt"
xmlns:SharePoint="Microsoft.SharePoint.WebControls"
xmlns:ddwrt2="urn:frontpage:internal">
<xsl:output method="html" indent="no"/>
<!--
End of Set Up
-->
<!--
The initial template which in this case is matching everything with "/"
It then creates a variable called Rows - this is accessed as $Rows
A standard HTML table and header row with the names of our columns is next followed by a loop through each row of the list and calls our second template dvt1-rowview to display the contents
-->
<xsl:template match="/" xmlns:x="http://www.w3.org/2001/XMLSchema">
<xsl:variable name="Rows" select="/dsQueryResponse/Rows/Row" />
<table cellpadding="10" width="331">
<tr>
<td align="center">
<a href="https://cardinalsolutions.sharepoint.com/sites/dev-jhuang/Lists/XMLCal/calendar.aspx" style="text-decoration:none;"><b><font color="#000000">EVENTS CALENDAR</font></b></a>
</td>
</tr>

<xsl:choose>
<xsl:when test="$Rows">
<xsl:for-each select="$Rows">
<xsl:call-template name="dvt_1.rowview" />
</xsl:for-each>
</xsl:when>
<xsl:otherwise>
<tr>
<td bgcolor="#000000" align="center">
<font color="#ffffff"><b>There are no events scheduled this week.</b></font>
</td>
</tr>
</xsl:otherwise>
</xsl:choose>

</table>
</xsl:template>
<!--
End of first template
-->
<!--
Standard HTML rows and cells contain the contents of our list row
xsl:value-of command is used to display our columns
Columns are accessed as @InternalColumnName
-->
<xsl:template name="dvt_1.rowview">
<xsl:variable name="dept" select="@department"/>
<tr>
<td>
<xsl:attribute name="bgcolor">
<xsl:choose>
<xsl:when test="$dept ='Communications'">
#EFCA08
</xsl:when>
<xsl:when test="$dept ='Human Resources'">
#AAA1C8
</xsl:when>
<xsl:when test="$dept ='Away Game'">
#D1D5DE
</xsl:when>
<xsl:when test="$dept ='Client Services'">
#449DD1
</xsl:when>
<xsl:when test="$dept ='Community Relations'">
#575761
</xsl:when>
<xsl:when test="$dept ='Corporate Office'">
#78C0E0
</xsl:when>
<xsl:when test="$dept ='Corporate Partnerships'">
#D56062
</xsl:when>
<xsl:when test="$dept ='Innovation'">
#648381
</xsl:when>
<xsl:when test="$dept ='Marketing'">
#8ACB88
</xsl:when>
<xsl:when test="$dept ='Philanthropy'">
#B7B6C2
</xsl:when>
<xsl:when test="$dept ='Premium'">
#FFC4D1
</xsl:when>
<xsl:when test="$dept ='Ticket Sales'">
#967AA1
</xsl:when>
<xsl:when test="$dept ='Arena Ops General'">
#F49F0A
</xsl:when>
<xsl:when test="$dept ='Arena Ops Home Game'">
#ffffff
</xsl:when>

<xsl:otherwise>
#ffffff
</xsl:otherwise>
</xsl:choose>
</xsl:attribute>
<a href="javascript:NewItem2(event,'https://cardinalsolutions.sharepoint.com/sites/dev-jhuang/Lists/XMLCal/DispForm.aspx?ID={@ID}');" style="text-decoration:none;">

<font size="1">
<xsl:attribute name="color">
<xsl:choose>
<xsl:when test="$dept ='Arena Ops Home Game'">
#000000
</xsl:when>
<xsl:otherwise>
#ffffff
</xsl:otherwise>
</xsl:choose>
</xsl:attribute>

<b>
<xsl:value-of select="@department"/>:&#160;<xsl:value-of select="@Title"/><br/>
<xsl:value-of select="@calcWebDay" />&#160;<xsl:value-of select="@calcWebD2" /></b></font></a></td>

</tr>

</xsl:template>
</xsl:stylesheet>

07.24.17
angular
...

const appRoutes: Routes = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'hero/:id',      component: HeroDetailComponent },
  {
    path: 'heroes',
    component: HeroListComponent,
    data: { title: 'Heroes List' }
  },
  { path: '',
    redirectTo: '/heroes',
    pathMatch: 'full'
  },
  { path: '**', component: PageNotFoundComponent }
];

Elasticsearch
. no sql document based database
. blog storage engine
. log analytics tools
. document / index / shard / nodes / cluster
. www.elasticsearch.org
. Marvel plugin
. . Sense - nice query dashboard
. schemas (mappings)

(POST) http://localhost:9200/my_blog

{
    "mappings": {
        "post": {
            "properties": {
                "user_id": {
                    "type": "integer"
                },
                "post_text": {
                    "type": "string"
                },
                "post_date": {
                    "type": "date"
                }
            }
        }
    }
}

p s 
...
getting started with elasticsearch for .net developers

atlassian - jira
confulence


git notes
...
git add .
git commit -m 'add changes'
git push origin master

user story notes
...
. sortable
. small
. valuable
. estimatable
. independent
. testable
. template
... As a <user type>, I want to <function> so that <benefit>.
... As a <persona>, I want to <do something> so that I can <realize a reward>.

PERSONAS
...
SUPER ADMIN
PARTNER ADMIN OR SUB ADMIN
MOMENT GIVER
MOMENT RECEIVER

sql
...
. microsoft sql server management studio

.net
...
. the CLR manages your app common language runtime
. namespace
. c:\windows\microsoft.net\framework\v4.0.30319\csc - visual c# complier
. ctor (tab/tab) Constructor shortcut

js
..
. constructor funcions should be named with Initial caps
. strict mode es5

angular 4
...
. ng build --prod --aot=false
. index.html
. favicon
. polyfills 1
. main 2
. styles 3 
. vendor 4
. inline 5

oop
...
. three pillars
.. 1 encapsulation (primary)
.. 2 inheritance
.. 3 polymorphism
. inheritance
. polymorphism
. abstract classes
. interfaces
. common interfaces

books
...
. the elements of style - william strunk
. high performance javascript
. javascript patterns

SRP - Single responsibility principles
...
. a computer programming principle that states that every module or class should have a responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.

angular style guide
...
. limiting files to 400 lines of code
. make code more reusable, easier to read and less mistake prone

www
...
. https://developer.mozilla.org/en-US/docs/JavaScript
. http://jsforcats.com/

p s
...
(001) - c# fundamentals with visual studio 2015 by scott allen - 5h21m (07.27.17) 3.10 computation
002 - building a js dev environment by cory house - 5h19m
003 - basics of programming with js by kyle simpson - 2h40m
004 - front-end web dev quick start with html5, css, and js - by shawn wildermuth - 3h4m
005 - advanced js by kyle simpson - 6h55m
006 - practical design patterns in js by jonathan mills - 3h10m
007 - object-oriented programming in js - es6 by mark zamoyta - 2h27m
008 - quick start to js: vol 1 by susan simkins - 1h43m
009 - js async module definition (amd) explained by kevin Murray - 3h4m
010 - rapid js training by mark zamoyta - 5h43m
011 - js: from fundamentals to functional js - bianca gandolfo - 7h9m
012 - js objects and prototypes - jim cooper - 48min
013 - js best practices - jonatha mills - 2h39m
014 - js from scratch - jesse liberty - 1h52m
015 - js: adv fundaments to jquery & pure dom scripting - justin meyer - 8h59m
016 - js fundamentals - lia mclennan - 2h53m
017 - js fundamentals for es6 - scott allen - 4h51m
018 - quick start to js: vol 2 - susan simkins - 1h53m
019 - choosing a js framework - brian holt - 5h31m
(020) - js: the good parts - douglas crockford - 4h52m (07.27.17)
021 - js for c# developers - shawn widermuth - 2h5
022 - js module fundamentals - brice wilson - 2h16m 
023 - hardcore functional programming in js - brian lonsdorf - 6h3m
024 - quick start to js: vol 3 - susan simkins - 1h24m
025 - modern async js - wes higbee - 6h35m
026 - structuring js code - dan wahlin - 2h10m
027 - testing clientside js - joe eames - 4h50m
028 - js design patterns - aaron powell - 2h2
029 - increase productivity: add a dev console to your app with js - carlos saloio - 2h34
030 - solve math programs with js - terry toy - 3h40
031 - prototype.js fundamentals - geoffrey grosenb - 3h3
032 - hands-on js project: solar calculator - paul cheney 2h6
033 - js.next: es6 - aaron frost - 5h24
034 - intro to js & jquery - karl swedberg - 3h34
035 - sweet.js: get started - aaron powell - 3h22
036 - reasoning about async js - wes higbee - 2h5
037 - front-end first: testing and prototyping js apps - elijah manor - 3h21
038 - large scale js on client and server - shawn wildermuth - 2h49
039 - play by play: html, css, and js with lea verou - 2h15
040 - adv techniques in js and jquery - kevin murray - 3h16m
041 - fixing common js bugs - elijah manor - 3h42
042 - front end web dev: get started - joe eames - 3h47
043 - jquery-free js - elijah manor - 2h26min
044 - modern, modular js with systemjs and jspm - wes higbee - 7h25
045 - building adv js animations with GSAP - todd shelton - 2h38
046 - shifting js into high gear with web workers - mike van sickle - 1h57m
047 - adv typescript - brice wilson - 2h55
048 - html5 fundamentals - craig shoemaker - 3h47
049 - creating vr experiences with js - alex mackey - 1h38m
050 - rapid es6 training - mark zamoyta - 4h16
051 - typescript fundamentals - dan wahlin - 4h25m
052 - asp.net ajax javascript and jquery - fritz onion - 2h22
053 - fundamentals of functional programming in js - nate taylor - 1h26
054 - become a full-stack .net developer - mosh hamedani - 5h34
055 - jquery fundamentals - dan wahlin - 5h18
056 - learn to program part 1: getting started - scott allen - 3h12
057 - getting started with typescript - brice wilson - 3h8m
058 - creating a responsive and flexible slideshow in javascript - alfredo lopez - 2h37
059 - fundamentals of building office add-ins with office js api - john brown - 2h36
060 - hands-on javascript project: json - paul cheney - 1h25
061 - building windows 8 apps with js and html - craig shoemaker 429
062 - extending bootstrap with css, js, and jquery - paul sheriff - 3h19
063 - angular cli - john pappa - 2h26min
064 - building web apps with open-source software on windows - jesse liberty - 2h30
065 - building stronger front-end practices - christina truong - 2h2
066 - jquery forms and bootstrap3 - mark zamoyta - 3h34
067 - jquery adv topics - joe eames - 3h3
068 - become a full-stack .net dev - architecture and testing - mosh hamedani - 3h59
069 - visual studio code - john papa - 4h11
070 - jquery animation - mark zamoyta - 3h41
071 - jquery template fundamentals - matt milner - 1h1
072 - getting started with progressive web apps - bill stavoulakis - 2h12
073 - jquery ui - scott allen - 1h54
074 - typescript in-depth - brice wilson - 4h40
075 - jquery tips and tricks - dan wahlin - 4h25m
076 - building scalable apis with graphql - samer buna - 2h10m
077 - jquery in depth - karl swedberg - 3h35
078 - getting started with es2017/es8 - roland gujit - 1h10
079 - jquery plugins & jquery ui - scott gonzalez - 3h26
080 - useful jquery plugins - robert boedighei - 3h16m
081 - fixing common jquery bugs - elijah manor - 2h27m
082 - asp.net core fundamentals - scott allen -5h57
083 - practical guide to vanilla web components - leon revill - 2h10m
084 - bootstrap 3 - shawn wildermuth - 3h50
085 - webpack fundamentals - joe eames - 2h23
086 - building app with asp.net mvc 4 - scott allen - 7h23
087 - intro to bootstrap - scott allen - 2h39m
088 - angular material fundamentals - ajden towfeek - 2h45
089 - asp.net mvc 5 fundamentals - scott allen - 6h14
090 - creating web apis what developers will lovew - kirsten hunter - 2h10m
091 - the journey from mvc to angular - paul sheriff - 2h26min
092 - html5 web component fundamentals - cory house - 5h18
093 - enhancing web uis with parallax scrolling - anthony harris - 1h1
094 - building bus components using angular - paul sheriff - 3h10m
095 - defeating cross-site scripting with content security policy - christian wenz - 2h10m
096 - practical html 5 - gill cleeren - 4
097 - C# fundamentals with C# 5.0 - scott allen - 6
098 - leveraging fluid-width principles for responsive design in jquery - saif ebrahim - 2
099 - amazing things you can do with a web browser - dan appleman - 1
100 - learn basic html 5 and css3 by building your first web page - mario duilio marcari - 2
101 - tactics and tools for troubleshooting front-end web dev - shelley benhoff - 1
102 - the geolocation api: using maps and location in your web pages - elizabeth robson - 1
103 - intro to web dev - nina zakharenko - 10
104 - creating a chrome extension - john sonmez - 2
105 - date and time fundamentals - matt johnson - 6
106 - angular: getting started - deborah kurata - 5
107 - angular fundamentals - joe eames - 9
108 - angular: first look - john papa - 4
109 - angular fundamentals - joe eames - 6
110 - play by play: angular 2 / rxjs / http and restful svc with john papas - dan wahlin - 1
111 - play by play: angular 2 quick start with john papa and ward bell - 2
112 - play by play: angular with typescript with john papa - 2
113 - building a responsive spa framework angular - mark zamoyta - 5
114 - code with us: angular quick start - john papa - 3
115 - angular forms - mark zamoyta - 2
116 - angular routing - deborah kurata - 4
117 - the journey from mvc to angular - 2
118 - angular material fundamentals - ajden towfeek - 2
119 - angular cli - john papa - 2
120 - angular reactive forms - deborah kurata - 3
(121) - angular 2 end-to-end - reggie dawson - 2 (07.28.17)
122 - integrating angular with node.js restful svc - dan wahlin - 4
123 - play by play: angular testing with john papa and ward bell - 1
(124) - adv angular workflows - johnathan mills - 1 (07.28.17)
125 - working with angular animations - gary simon - 1
126 - styling angular app - brian treese - 1
127 - add angular to mvc apps - paul sheriff - 2
128 - building bus components using angular - paul sheriff - 3
129 - become a full-stack .net dev - mosh hamedani - 5
130 - become a full-stack net dev - adv topics - mosh hamedani - 4
131 - asp.net core fundamentals - scott allen - 5
132 - building your first asp.net core web app - gill cleeren - 4
133 - builidng your first api with asp.net core - kevin dockx - 4
134 - building a restful api with asp.net core - kevin dockx - 8
135 - implementing and securing an api with asp.net core - shawn wildermuth - 6
136 - getting started with .net core for windows dev - wes higbee - 3
137 - asp.net core: the mvc request life cycle - alex wolf - 3
138 - asp.net mvc adv topics - scott allen - 5
139 - become a full-stack .net developer - architecture and testing - mos hamedani - 3
140 - using asp.net core to build single-page app - ajden towfeek - 1
141 - asp.net mvc fundamentals - scott allen - 4
142 - using visual studio code for asp.net core projects - shawn wildermuth - 2
143 - understanding asp.net core (update) - roland guijt - 2
144 - asp.net core with the new msbuild based tooling - wes higbee - 4
145 - building apps with asp.net mvc 4 - scott allen - 7
146 - understanding asp.net core security - goland guijt - 3
147 - migrating legacy http modules to asp.net core - chad mccallum - 2
148 - implementing an api in asp.net web api - shawn wildermuth - 6
149 - asp.net 5: first look - scott allen - 2
150 - c# fundamentals with visual studio 2015 - scott allen - 5
151 - implementing custom middleware components in asp.net core - galvin lanata - 1
152 - asp.net ajax js and jquery - fritz onion - 2
153 - 10 ways to build web services in .net - chad mccallum - 6
154 - building cross-platform apps with .net core - wes higbee - 7
(155) - asp.net mvc fundamentals - scott allen - 4 (07.28.17) 
156 - asp.net mvc adv topics - scott allen - 5
157 - docker for web dev - dan wahlin - 5
158 - play by play: docker for web dev with john papa - 1
159 - getting started with docker - nigel poulton - 2
160 - docker deep dive - getting started with docker on win - wes higbee - 5
161 - docker and containers: the big picture - nigel poulton - 1
162 - intro to docker on win with visual studio 2017 - marcel de vries - 4
163 - getting started with docker datacenter - elton stoneman - 1
164 - managing docker images - david clinton - 1
(165) - deploying .net app with octopus deploy - kenneth truyers - 1 (07.28.17)
166 - play by play: modernizing your deployment strategy with octopus - damian brady - 1
(167) - advanced techniques in js and jquery - kevin murray - 3 - (7/31/17)
(168) - basics of programming with js - kyle simpson - 2 - (7/31/17)
(169) - advanced js - kyle simpson - 6 - (7/31/17)
(170) - intro to sql - john flanders - 3 (8/1/17)
(171) - play by play: angular testing with john papa and ward bell - 1 (8/4/17) [1,2]
(172) - visual studio code - john papa - 4 (8/4/17) [1,2,3,4,5,6,7,8,9]
(173) - intro to node.js - paul o'fallon - 2 [1,2,3,4,5,6,7]
(174) - advanced node.js - samer buna - 3 [1,2,3,4,5,6,7,8,9,10]
(175) - rapid es6 training - mark zamoyta - 4 [1,2,3,4,5,6,7,8,9]
(176) - hardcore functional programming in js - brian lonsdorf - 6 (8/9/17) [1,2,3]
(177) - adv typescript - brice wilson - 2 (8/9/17) [1,2.1,3]
(178) - typescript in-depth - 4 (8/9/17) [1,2,3,4,5,6,7,8,9,10,11]
(179) - a pratical start with typescript - roland guijt - 1 (8/9/17) [1,2]
(180) - add angular to mvc apps - paul sheriff - 2 (8/10/17) [1,2,3,4,5,6,7,8]
(181) - angular fundamentals - jim cooper and joe eames - 9 (8/11/17) [1,2,3.9,4,5,6,7,8,9,10,11,12,13,14,15,16,17]
(182) - typescript in-depth - brice wilson - 4 - (8/14/17) [1,2,3,4,5.3,6,7,8,9,10,11]

docker
...

elasticsearch
...

octopus
...
. 

.net
...
. entity framework - data oriented apps
. code first ddd domain driven design - creating classes first rather than db first. code first api will create db on the fly based on your classes and config.
. mvc model view controller

http-server
...
. run http-server
. http://127.0.0.1:8080/jia.html

node.js
...
. created 2009
. server side js
. 3 parts = libuv + v8 + custom js c++

clarity
...

es6 - ecmascript 2015
...

js
...
. var newJia = oldJia.replace('jia', 'cat');
. currying or partial app is one of the functional techniques

launch.json
...
{
    // Use IntelliSense to learn about possible Node.js debug attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
         {
            "name": "Launch Chrome against localhost, with sourcemaps",
            "type": "chrome",
            "request": "launch",
            "url": "http://localhost:4200/#/login/7777777",
            "sourceMaps": true,
            "trace": true,
           /*"diagnosticLogging": true,*/
            "webRoot": "${workspaceRoot}/src",
            "useDataDir": "${workspaceRoot}/.vscode/chrome",
            "sourceMapPathOverrides": {
              "webpack:///C:*": "c:/*"
          }
        },
        {
            "name": "Attach to Chrome, with sourcemaps",
            "type": "chrome",
            "request": "attach",
            "port": 9222,
            "sourceMaps": true,
            /*"diagnosticLogging": true,*/
            "webRoot": "${workspaceRoot}",
            "url": "http://localhost:4200/*",
            "sourceMapPathOverrides": {
                "webpack:///*": "/*"
            }
        },
        {
            "name": "Debug Test",
            "type": "chrome",
            "request": "launch",
            "url": "http://localhost:9876",
            "sourceMaps": true,
           /*"diagnosticLogging": true,*/
            "webRoot": "${workspaceRoot}",
            "sourceMapPathOverrides": {
              "webpack:///C:/HOMEOWNERS/homeownersclient/*": "${workspaceRoot}/*"
          }
        }        
    ]
}

typescript
...
. based on ECMAScript 2015
. designed by anders hejlsberg the designer of c# - 10/2012
. classes
  . fields- any var declared in a class
  . constructors
  . functions or methods
. numbers - property
  . MAX_VALUE
  . MIN_VALUE
  . NaN 
  . NEGATIVE_INFINITY
  . POSITIVE_INFINITY
  . prototype
  . constructor
. numbers - methods
  . toExponential()
  . toFixed()
  . toLocaleString()
  . toPrecision()
  . toString()
  . valueOf()
. string - property
  . constructor
  . length
  . prototype
. string - methods
  . charAt()
  . charCodeAt()
  . concat()
  . indexOf()
  . lastIndexOf()
  . localCompare()
  . match()
  . replace()
  . search()
  . slice()
  . split()
  . substr()
  . substring()
  . toLcaleLowerCase()
  . toLocaleUpperCase()
  . toLowerCase()
  . toString()
  . toUpperCase()
  . valueOf()
. array - methods
  . concat()
  . every()
  . filter()
  . forEach()
  . indexOf()
  . join()
  . lastIndexOf()
  . map()
  . pop() - remove last element from array and returns that element
  . push() - adds one more element to the end of the array and returns the length of the array
  . reduce()
  . reduceRight()
  . reverse()
  . shift() - remove 1st element and return element
  . slice() 
  . some()
  . sort()
  . splice()
  . toString()
  . unshift()

. prototype - the prototype property allows you to add properties and methods to an object
. Enums
. tuples - let myTuple: [number,string] = [25, 'truck'];
. functions - building blocks of readable, maintainable, and reusable code
  . lambda - fat arrow function
    1. parameters
    2. fat arrow notation => aka goes to operators
    3. statements - functions instruction set
    . var foo = (x:number)=>10+x
  . defining a function what and how task to be done
  . calling a function - executing function
  . returning functions - return values
  . parameterized function - pass values
  . anonymous function
    . var msg = function() {
      return "hello";
    . }
    . console.log(msg())
. loops
  . break - break out of loops
  . continue
  . definite loop - for loop
  . indefinite loop 
    . do...while
    . while loop
. types
  . boolean
  . number
  . string
  . array
  . Enum - friendly names to finite set of numeric values
  . any - string, number, or object
  . void - function does not return a value
. let and const - scope inside block not function (var hoisted to top of function) name only allowed once in each code block
. operators
  . arithmetic
  . logical
  . relational 
  . bitwise
  . assignment
  . ternary/conditional - test ? expr1 : expr2
  . string
  . decision
    . if statement
    . if..else statement
    . else... if and nested if statements
    . switch statement
  . type
    . typeof
    . instanceof
. SCOPE
  . global scope
  . class scope (fields) 
  . local scope - inside methods, loops, etc.
. type assertion - changing a var from one type to another
. superset of js
. strong typing fewer bugs
. compiles to js
. cross platform
. open sourceMapPathOverrides
. tsc -v (check for version)
. variable declaration in tsc
  . var id: type = value;
  . var id: type; (value=undefined)
  . var id = value; (type=any)
  . var id; (type=any,value=undefined)
. var names
  . alpha and numeric (cannot start with number)
  . no special char or spaces (except _ and $)
. user-defined types
  . enumerations (enums)
  . classes
  . interfaces
  . arrays
  . tuple
. null and undefined
  . undefined - var has no value or object assitned to it
  . null - var set to object with value undefined
. keywords
  . break
  . as
  . any
  . switch
  . case
  . if
  . throw
  . else
  . var
  . number
  . string
  . get
  . module
  . type
  . instanceof
  . typeof
  . public
  . private
  . enum
  . export
  . finally
  . for
  . while
  . void
  . null
  . super
  . this
  . new
  . in
  . return
  . true
  . false
  . any
  . extends
  . static
  . letter
  . package
  . implements
  . interfaces
  . function
  . new
  . try
  . yield
  . const
  . continue
  . do
  . catch
  . name? new?
. template strings
  . surrounded by backticks ` and embedded expressions ${ name }`
. array
  . let list: number[] = [1,2,3];
  . let list: Array<number> = [1,2,3];
. tuple - array with mixed type for examle string and number
  . let x: [string, number];
  . x = ["hello", 10];
. enum - a way of giving more friendly names to set of numeric values
. any - let notSure: any = 4;
. void - function that does not return a value
  . function warnUrser(): void {
    alert('test');
  }


books
...
. design patterns: elements of reusable object-oriented software by erich gamma, richard helm, ralph johnson and john vlissides "gang of four"

all about fat arrow functions
...
. you don't need to keep typing function
. it lexically captures the meaning of this
. it lexically captures the meaning of arguments
. sample - var inc = (x)=>x+1;

ng4 notes
...
. component classes manage html templates
. app logic in services
. organizing components and services in modules
. bootstrapping the root module
. decorators - functions that modify js classes - angular uses decorators to attach metadata to classes so that it knows what those classes mean and how they should work
. declarations - view classes that belongs to this module
  1. components
  2. directives
  3. pipes
. exports
. imports 
. providers - services
. bootstrap - link to root component
. components
  . controls a patch of screen called a view
  . define app logic (what it does to support the view) inside a class
  . the class interacts with the view through an API of properties and methods
. lifecycle hooks - creates, updates, destroys - ngOnInit()
. templates - html
. metadata - tells angular how to process a class
. @Component decorators
  1. selector - CSS selector that tells angular to create and insert an instance of this component where it finds a <component-name> tag in parent html
  2. templateUrl - relative address to html template
  3. providers - array of dependency injection providers for services that the component requires
. other decorators
  1. @Injectable
  2. @Input
  3. @output
. data binding - bind component data to html template single or both directions
. interpolation {{name}}
. property binding [hero] pass selectedHero from parent to child
. event binding (click) calls component methods from browser events like button clicks for example
. 2 way data binding with <input [(ngModel)]="hero.name">
. structural directives
  1. <li *ngFor="let hero of heroes"></li>
  2. <hero-detail *ngIf="selectedHero"></hero-detail>
. attribute directive - ngModel - <input [(ngModel)]="hero.name">
  . ngSwitch
  . ngStyle
  . ngClass
. service - value, function or feature taht your app needs - shared service
  . a class with a narrow well-defined purpose it should do something specific and do it well
  . logging svc
  . data svc
  . message bus
  . tax calculator
  . app config
. dependenc injection - provide new components with services they need
. animations
. change detection
. events
. forms
. http
. lifecycle hooks
. pipes
. router
. testing
. lifecycle hooks
  . ngOnChanges - called before ngOnInit()
  . ngOnInit
  . ngDoCheck
    . ngAFterContentInit
    . ngAfterContentChecked
    . ngAfterViewInit
    . ngAfterViewChecked
  . ngOnDestroy - cleanup just before angular destroys the directive/component
. safe namespace css

functional js
..
. eloquent js - http://eloquentjavascript.net/1st_edition/chapter6.html
. mostly adequate guide to fp - https://github.com/MostlyAdequate/mostly-adequate-guide
. fun fun functions video series - https://www.youtube.com/watch?v=BMUiFMZr7vk
. a nettut's paid video course on fp - http://code.tutsplus.com/courses/functional-programming-in-javascript
. js allonge - https://leanpub.com/javascriptallongesix/read
. dry - don't repeat yourself
. yagni - ya ain't gonna need it
. loose coupling high cohesion
. principle of least surprise
. single responsibility
. pure function - given same input will always return same output does not have any observable side effect
. currying - you can call a functon with fewer arguments than it expects. it returns a function that takes the remaining arguments
. hindley-milner type signatures


angular
...
. @Input() - pass from parent to child put on child component file
  . <event-thumbnail [event]="event1"></event-thumbnail>
. date
  . today: number = Date.now();
  . {{ today | date: 'yyyy' }}

smacss.com
...

interfaces 
...
. are the way to type anything more complicated than our basic types, including function and classes\
  interface IMyInterface {
    value: string;
    method(): number;
    (): boolean;
  }
. contracts that define types
. defines how a type can and cannot be used
. defines shape of an object
. interface is a contract without the implementation details

  arrow functions
  ...
  . concise syntax for anonymous functions - with fat arrow, you don't have to write the "function" keyword or "return" keyword - much more concise - aka Lamda  functions
  . js 
    let arr allBooks.filter(function(book) {
      return book.author === 'Herman Melville';
    });
  . tsc
    let arr = allBooks.filter(book => book.author === 'Herman Melville');

classes
. template for creating objects
. provides state storage and behaviors
. encapsulates resuable functionality

constructors
...
. constructors are functions that perform initialization for new instances of a class
. in ts only one constructor per class
. constructor(title: string, publisher?: string) {} "?" makes it optional

properties and methods
...
. classes provide the actual implementation details

generics
...
. bits of code designed to work with multiple types

array
...
. let poetryBooks: Book[];
. let poetryBooks: Array<Book>;

destructuring arrays
...
. let medals: string[] = ['gold', 'silver', 'bronze'];
. let [first, second, third] = medals;

destructuring objects
...
. let person = {
    name: 'jia',
    addres: '304 fern rd',
    phone: '813-415-5571'
  }
. let { name, address, phone } = person;

decorators
...
. proposed feature for future js
. implemented as ts functions

callback functions
...
. higher order functions
. commonly used to process async results
. node accept error and data parameterized 
. interface LibMgrCallback {
    (err: Error, titles: string[]): void;
  }

interface
...
. code contract
. interface IEngine {
    start(
      callback: (
        startStatus: boolean,
        engineType: string) => void): void;
    stop(
      callback: (stopStatus: boolean,
      engineType: string) => void): void;
    )
      )
    )
}

ts - class
...
. class is the blueprint house is the object
. define data in a class with fields
. object of a class is also instance of a class
. fuction in a class is also method of a class

ts - data types
...
. built-in types
  . boolean
  . string
  . number
. custom types
  . enum
  . array
  . interface
  . class

type inference - when you try to assign a string to a number ts will give you an error even if you don't specify the type due to type inference based on the number value assigned to the var

type assertions - assert the data type after first declaring it <any> type
. let fixedString: string = (<number>value).toFixed(4);
. let fixedString: string = (value as number).toFixed(4);

interfaces vs classes
...
. interface
  . define a new type
  . properties (signatures)
  . methods (signatures)
  . cannot be instantiated (contract)
. classes
  . define a new type
  . properties (with inplementation)
  . methods (with implementation)
  . can be instantiated

  creating an interface - interface can extend another interface
  . interface Manager extends Employee {}

  constructor
  . special type of function to create new instances of a class
  . constructor {} { console.log ('test')}

  super();
  . calling super is how you call the parent class's constructor from a child class

  hoisting
  . anytime a var keyword is used inside a function, it is hoisted to the top of the function regardless of where it is in the function

const
...
. block scoped
. const startTime = Date.now();

namespace - ts only concept

naming
...
. pascal casing - InitialCaps
. camel casing - initialLowerCase

js - prototyping
...
. every object is built by a constructor function 
. a constructor makes an object based on it's own prototype
. a constructor makes an object that is "linked to" it's prototype

notes
...
. objects as squares
. functions as circles
. before line 1
  . function named object
  . object named .prototype link from function to object
    . toString
. line 1
  . fuction named "Foo"
  . object named .prototype link from function to object
  . .constructor link from object to function
. line 4
  . add property "identify" to object
. line 8 - create new a1 object
  . create a new object
  . set "this" focus on object
  . add a new property ".me" in object
  . return this give object label "a1"
. line 9 - create a new a2 object
  . create a new object
  . set this focus on object
  . add a new property.me in object
  . return this give object label "a2"
. line 11 - add speak method to object

[[Prototype]] - bracket bracket P

.prototype - dot prototype

__proto__ - dunder proto
. getter function returns internal prototype linkage
. public property
. es6 standard
. IE 11

Object.getPrototypeOf(a1)

shadowing prototype chain

"this" keyword always reference the call site

go up the prototype chain to find constructor

currying in js
...
. is a way to reduce functions of more than one argument to functions of one argument
. partial evaluation

Object.create
. create a new object
. link it
. no return data
. no constructor
. Bar.prototype = Object.create(Foo.prototype);

oop
...
. classes = classification

objects aka
...
. representation
. abstraction
. model
. thing
. entity
. business object
. object

class
. blueprint used to stamp out objects
. class = classification
. object = instances of class
. name class Pascal case for ex "Drone"
. a class is a function
. you use the class function to create a new instance of Drone an object
. let drone = new Drone();
. static properties or class properties you can add properties to the class itself
. method is a function that gets attached to an instance
. when working with an instance of a class, always use the "this" keyword to refer to the object property
. static method only exists on the class not the instance
. when a variable name begins with an underscore, it usuall means it's private for example "_id"
. getters and setter
. each html element can be a class

ocp - the open/closed principle
... 
. the open / closed principle states that software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification

srp - the single responsibility principle
...
. the srp states that every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class

the liskov substitution principle
...
. states that subtypes must be substitutable for their base types

isp - the interface segregation principle
...
. states that clients should not be forced to depend on methods they do not use

dip - the dependency inversion principle
...
. high level modules should not depend on low level modules. both should depend on abstractions
. abstractions should not depend on details.
. details should depend on abstractions

dry - don't repeat yourself
...
. every piece of knowledge must have a single, unambiguous representation in the systemjs
. repetition in logic calls for abstractions.
. repetition in process calls for automation

js - functions
...
. function functionName(parameter){
    }
. functionName(argument);

array
...
. store a list of information
. var friends = [];

objects
...
. host objects
  . document
  . window
  . element
  . event
  . node
  . comment
  . console
. core objects
  . math
  . object
  . string
  . boolean
  . array
  . date
  . number
. custom objects

software eng
...
. discipline applied to 

    sprint 15
    ...
    01. testing effect
    02. eft email notification
    03. eft - endorsements, cancels, other changes
    04. payment screen modification for eft
    05. create hamburger menu to save with options
    06. pos screen mods for pho - discounts /surcharges
    07. modify deductible screen to accomodate three deductibles for pho
    08. modify deductible screen to accommodate three deductibiles for pho
    09. outstanding pho rating
    10. pho edits
    11. quote pdf
    12. ux/ui cleanup
    13. applicant date of birth - tx pho
    14. load testing
    15. ux imporvements and optomization
    16. regression testing sprint 15
    17. bho2172 is triggering as uw and it should not
    18. sprint 15 production support 8/2 - 8/15
    19. fl ho - dummy policy number for m p d 
    20. eft payment option not displaying on the application

    backlog
    ...
    01. spike: ca/uat environment
    02. state validation for pos 
    03. pho tx - distance to water and coast
    04. 5) coverage edits (2)
    05. pho - make credit mandatory
    06. pos mod for pho - run credit via lexis nexis (3)
    07. test rating
    08. application (research, validate, program and test)
    09. check writer
    10. push front end data to backend
    11. transaction testing (froom front-end nb policy)
    12. month end set up
    13. lockbox setup
    14. doc package testing
    15. lender and payemnt screen adjustments
    16. eft - endoresments cancels other changes long term
    17. spring 16 regressing testing 8/16 - 8/29
    18. sprint 16 product support 8/16/-8/29
    19. add property edits (pos and pho)
    20. deploy pos ui and web api to ca environment
    21. rename field on producer screen
    22. pos - cross sell for flood
    23. append quote cover letter to pdf
    24. google analytics: screen progression
    25. screen progression for bi 
    26. pl rater fl - modifyfor pos platform
    27. agent set up
    28. establish fully functional uat /ca environment
    29. run def rater state driven
    30. elastic search for street address in pos
    31. elastic address search
    32. pre-fill for property characteristics in pos 
    33. lexis nexis - no score no hit and zero score
    34. 360 value update xml for exterior pool
    35. production - fix la hail deductible backend edit
    36. display print pre-app
    37. run clue - back end integration 
    38. run clue service call to lexis nexis
    39. private label ui modifications
    40. inspection data irs integration
    41. inpsection data millennium integration
    42. maintenance screens
    43. prior carriers add to 460
    44. credible  year question should not be displayed for address with ppc2 as blank
    45. ivans
    46. ets 82596  increase binding limit for florida ho4
    47. adis warehouse
    48. statement & agreement
    49. adis prefill
    50. spike - technical discussion temp exposure
    51. exposure closing temp
    52. exposure closing perm 
    53. spike - technical discussion instant dec 
    54. spike - upload documents discussion / documentation
    55. run credit long term solution part 2
    56. run credit long term solution part 1
    57.. ux/ui cusotm ui/ 3rd party
    58. upload documents
    60. __________ future release stories above this line
    61. ets 82643 manually entered dist to coast error in rating fl
    62. ets 82620 nb quote purge process
    63. ets 82623 sc h06 only offering base package
    64 fl ho unable to add additional insured in sqa 
    65. ets 82625 homeowners wind mit values back end validation
    66. create edit to send quotes with increased business property to underwriting
    67. modify profit hurdle for def rater
    68. ets 82602 optimize program call to 610 for homeowners agent portal screens
    69. fix policy data mover for ho
    70. pl rater secondary seasonal aop error message not firing 
    71. pho ho4 and ho6 sotry placeholder for possible future release 
    72. add eft functionality to homeowners consumer portal
    73. add eft functionality to legacy homeowners agent portal
    74. spike assess options for enhancing security for pps in immediate and medium terms
    75. unable to print instant dec
    76. date of purchase issue
    77. incorrect wind mit uwr message
    78. nacha file - change to entry hash calculation
    79. eft backend bug - pps error message and subscription id in same field overwriting
    80. eft backend notification if pps is unavailable

    js - prototype object
    ...
    . each 'type' has a prototype object
    . just an object (example can add properties to it)
    . all instances of an 'type" share the members of the prototype

    js notes
    ...
    . first class functions - functions treated like any other variable
    . js is a prototype-based language
    . each object has a prototype object, which acts as a template object that inherits methods and properties from
    . the properties and methods are defined on the prototype property on the object's constructor functions not the object instances themselves
    . prototype chain
    



pluralsight
...
    (182) - typescript in-depth - brice wilson - 4 - (8/14/17) [1,2,3,4,5,6,7.2,8,9,10,11]
    (183) - adv ts - brice wilson - 2 - (8/14/17) [1,2,3,4,5,6,7]
    (184) - ts fundamentals - dan wahlin - (8/14/17) 4 [1,2,3,4]
    (185) - a practical start with ts - roland guijt - (8/14/17) 1 [1,2,3.3,4,5]
    (186) - getting started with ts - brice wilson - 3 (8/14/17) [1,2,3,4,5,6,7]
    (187) - using es6 with ts - steve ognibene - 2 (8/14/17) [1,2,3,4]
    (188) - basics of pro with js - kyle s - 2 (8/14/17) [1.2]
    (189) - adv js - kyle s - 6 (8/14/17) [1,2,3,4.4,5]
    (190) - oop in js es6 - mark z - 4 (8/15/17)  [1,2,3.10,4,5,6,7]
    (191) - solid principles of oo design - steve s - 4 (8/15/17) [1,2,3,4,5,6,7,8,9]
    (192) - quick start to js vol 3 - susan s - 1 (8/15/17) [1,2]
    (193) - software eng essentials - mohamad h - 4 (8/15/17)[1,2,3,4,5,6,7,8,9]
    (194) - what is programming - simon a - 2 []
    195 - beginning powershell scripting for dev - robert c - 6 []
    (196) - js for c# dev - shawn w - 2 [1,2,3,4]
    (197) - quick start to js vol 2 - susa s -(8/15/17) [1,2]
    



























































 




