date.diff
...
jToday: number = Date.now();
jDateRange: DateRange;
jStartDate: Date;
jEndDate: Date;
jStartTimeDiff: number;
jEndTimeDiff: number;
jEffectiveDateInRange: boolean;
jStartDateDiff: number = 1;
jEndDateDiff: number = 0;

if(this.jStartTimeDiff <= 0 || this.jEndTimeDiff <= 0) {
this.jEffectiveDateInRange = false;
this.toggleEffectiveDateOpen();
} else {
this.jEffectiveDateInRange = true;
} 

jCheckValidEffectiveDate() {
return this.agentService.getEffectiveDateRange(this.quoteService.getCurrentQuote())
.subscribe(dateRange => 
{
this.jDateRange = dateRange;
this.jStartDate = dateRange.getStartDate();
this.jEndDate = dateRange.getEndDate();
this.jStartTimeDiff = Math.round(((this.jToday - dateRange.getStartDate().getTime())/86400000));
this.jEndTimeDiff = Math.round(((dateRange.getEndDate().getTime() - this.jToday)/86400000));
});
} 

  jCheckEffectiveDateInRange() {
    this.agentService.getEffectiveDateRange(this.quoteService.getCurrentQuote())
    .subscribe(dateRange => {
      if (dateRange.getStartDate() <= this.effectiveDate &&
        dateRange.getEndDate() >= this.effectiveDate) {
          this.jEffectiveDateInRange = true;
        } else {
          if ((!(this.quoteService.getCurrentQuote().quoteStatus === QuoteStatus.PolicyIssued)) ||
            this.quoteService.getCurrentQuote().quoteStatus === QuoteStatus.ApprovedByUnderwriter) {
            this.jEffectiveDateInRange = false;
            this.toggleEffectiveDateOpen();
          }
        }});
  }

Discounts - PHO
...
. formData.newHomePurchaseDate
. dateStringBeforeDate()
. BfcValidator
  . BfcValidator.dateStringBeforeDate(this.currentQuote.effectiveDate)
. dateValidator
. BfcValidator
. from api?
  . discountSurchargeFormData.newHomePurchaseDate.valueOrEmptyString
. bfc-validators.ts

import {Validators, ValidatorFn, AbstractControl} from '@angular/forms';
import {BfcDateFormatter} from './bfc-date-formatter';

  static dateStringBeforeDate(maxDate = new Date()): ValidatorFn {
    return (control: AbstractControl): {[key: string]: any} => {
      const input = control.value;
      const dateInput = BfcDateFormatter.dateOrNull(input);
      const isValid = (dateInput === null || dateInput < maxDate);
      if (!isValid) {
        return {'maxDate': {maxDate}};
      } else {
        return null;
      }
    };
  }

discount-surcharge.component.ts
...
. line: 9 - [edit] add "ValidatorFn"